return(ctd)
}
WaterCT <- water %>%
filter(Sample_Name != "Supply_Water") %>% # Remove 16s for ARG plot
select(Sample_Name, plot, sample_number, treatment, Assay, Value)
WaterCT$Value <- as.numeric(WaterCT$Value) # Make numeric
max(WaterCT$Value[WaterCT$Value < 900])
# The highest value less than 999 is 28.9, so changing everything above 30 to NA
WaterCT$Value[WaterCT$Value > 30] <- NA # Change high CT
WaterCT$Treatment_f = factor(WaterCT$treatment,
levels = c('WCS', 'WCSM', 'WCM'),
labels = c("CS", "CSM", "CM")) # Change order of factors, WCS is kinda like control
unique(WaterCT$Assay)
WaterCT <- WaterCT %>% # Add classes to ARGs
mutate(gene_class = case_when(Assay %in% unique(WaterCT$Assay[grepl("^[aa]", WaterCT$Assay)]) ~ "AMG",
Assay %in% unique(WaterCT$Assay[grepl("^[erm]", WaterCT$Assay)]) ~ "MLSB",
Assay %in% unique(WaterCT$Assay[grepl("^[sul]", WaterCT$Assay)]) ~ "Sulfa",
Assay %in% unique(WaterCT$Assay[grepl("tet", WaterCT$Assay)]) ~ "Tet",
Assay %in% c("intl1", "intl2", "intl3", "IS1247", "IS6100", "tnpA2",
"tnpA5", "tnpA6", "tnpA3", "intI1F165_clinical", "tnpA1", "int1-a-marko", "tnpA7") ~ "MGE",
Assay %in% c("cadC", "cmr") ~ "HM",
Assay == c("16S_Eub_338_518") ~ "16S"))
WaterCT$gene_class_f = factor(WaterCT$gene_class, # Order the classes
levels = c('AMG', 'MLSB', 'Sulfa', "Tet", "MGE", "HM", "16S"))
test <- WaterCT %>% # Order ARGs based on class
arrange(gene_class)
levels <- dput(levels(factor(test$Assay))) # dput ftw!!!
heatmap <- ggplot(WaterCT, aes(as.factor(sample_number), ordered(Assay, levels = levels))) +
geom_tile(aes(fill = Value), colour = "white", size = 0.1) +
scale_fill_viridis(name = "Gene CT", option = "plasma")  +
labs(x = "Sample Time (min)", y = "Gene") +
facet_nested(gene_class_f ~ Treatment_f + plot, scales = "free", space = "free") + theme_classic() +
theme(
legend.background = element_rect(
fill = (alpha = 0),
color = 'black',
size = 0.1),
panel.background = element_rect(color = 'black', size = 1.4),
strip.text.x = element_text(size = 10, face = 'bold'),
strip.background = element_rect(colour = 'black', size = 1.4)
)  +
scale_y_discrete(
name = NULL,
labels = labels
) +
theme(
axis.text.y = element_markdown(color = "black", size = 11)
)
heatmap
ggsave(filename = "plots/waterCTheatmap.png", plot = last_plot(), device = "png", units = "in", width = 6.5, height = 7.5, dpi = 300)
# To fix I need to make sure that s and w are the same, use setdiff and change the order of the arguments
setdiff(stds$Assay, WaterCT$Assay)
setdiff(WaterCT$Assay, stds$Assay)
s <- stds %>%
drop_na("counts")
w <- WaterCT %>%
filter(!Assay %in% setdiff(WaterCT$Assay, stds$Assay))
w <- w %>%
select(plot, sample_number, treatment, Assay, Value, gene_class)
setdiff(stds$Assay, w$Assay)
setdiff(w$Assay, stds$Assay)
dput(unique(w$Assay)) # Use this list for the next map function
# map this list of standards and counts to the biomark data to generate counts
normby16s <- c("16S_Eub_338_518", "sul1", "tetW", "sul2", "erm(C)", "tetX",
"tetbP", "aadA9", "tetG", "tetH", "tetL",
"tetM", "IS6100", "tetT", "strB") %>%
map( ~ get_counts(s, w, gene = .x)) %>%
reduce(full_join)
#saveRDS(normby16s, file = "../data/WorArgBySixS.RDS") # note these are not normalized by 16s, just counts from standard curves
norm <- normby16s %>%
unite(ID, c("plot", "sample_number", "Assay"), sep = ".", remove = F) %>%
select(!Value) %>%
dplyr::group_by(plot, sample_number, Assay) %>%
dplyr::mutate(rep = seq_along(ID)) %>%
select(plot, sample_number, rep, treatment, Assay, gene_class, counts) %>%
ungroup()
SixS <- norm %>%
filter(Assay == "16S_Eub_338_518") %>%
dplyr::rename(SixSCount = counts) %>%
select(plot, sample_number, rep, SixSCount, treatment)
dfdf <- norm %>%
left_join(SixS, by = c("plot", "sample_number", "rep", "treatment")) %>%
filter(!Assay == "16S_Eub_338_518")
# Now got to divide each count of each gene by the 16s number
test <- w %>% # Order ARGs based on class
arrange(gene_class)
levels <- dput(levels(factor(test$Assay))) # dput ftw!!!
dfdf$treatment = factor(dfdf$treatment,
levels = c('WCS', 'WCSM', 'WCM'))
dfdf$sample_number <- as.factor(dfdf$sample_number)
levels(dfdf$sample_number) <- list("2.5" = "1", "7.5" = "2", "12.5" = "3", "17.5" = "4", "22.5" = "5", "27.5" = "6")
waterdata <- dfdf %>%
mutate(norm = counts/SixSCount)
levels(waterdata$treatment) <- list("CS" = "WCS", "CSM" = "WCSM", "CM" = "WCM")
heatmap2 <- ggplot(waterdata, aes(as.factor(sample_number), ordered(Assay, levels = levels))) +
geom_tile(aes(fill = norm), colour = "white", size = 0.1) +
scale_fill_viridis(name = "ARG count \nnormalized by 16S")  +
labs(x = "Sample time (min) after runoff", y = "ARG") +
facet_nested(gene_class ~ treatment + plot, scales = "free", space = "free") + theme_classic() +
theme(
panel.background = element_rect(color = 'black', size = 1.4),
strip.text.x = element_text(size = 10, face = 'bold'),
strip.background = element_rect(colour = 'black', size = 1.4),
axis.text.x = element_blank(),
legend.position = "top",
legend.key.width = unit(.75, "in")
)
heatmap2  +
scale_y_discrete(
name = NULL,
labels = labels
) +
theme(
axis.text.y = element_markdown()
)
ggsave(filename = "plots/WaterARGnormcountHeat.png", plot = last_plot(), device = "png", units = "in", width = 6.5, height = 7.5, dpi = 300)
levels(waterdata$treatment) <- list("CS" = "WCS", "CSM" = "WCSM", "CM" = "WCM")
heatmap2 <- ggplot(waterdata, aes(as.factor(sample_number), ordered(Assay, levels = levels))) +
geom_tile(aes(fill = norm), colour = "white", size = 0.1) +
scale_fill_viridis(name = "ARG count \nnormalized by 16S")  +
labs(x = "Sample time (min) after runoff", y = "ARG") +
facet_nested(gene_class ~ treatment + plot, scales = "free", space = "free") + theme_classic() +
theme(
panel.background = element_rect(color = 'black', size = 1.4),
strip.text.x = element_text(size = 10, face = 'bold'),
strip.background = element_rect(colour = 'black', size = 1.4),
axis.text.x = element_blank(),
legend.position = "top",
legend.key.width = unit(.75, "in")
)
heatmap2  +
scale_y_discrete(
name = NULL,
labels = labels
) +
theme(
axis.text.y = element_markdown()
)
ggsave(filename = "../Figures/Fig4.jpeg", plot = last_plot(), device = "jpeg", units = "in", width = 7, height = 7, dpi = 300)
heatmap2$data
saveRDS(heatmap2$data, file = "../Data/hetmapdata.RDS")
levels(waterdata$treatment) <- list("CS" = "WCS", "CSM" = "WCSM", "CM" = "WCM")
heatmap2 <- ggplot(waterdata, aes(as.factor(sample_number), ordered(Assay, levels = levels))) +
geom_tile(aes(fill = norm), colour = "white", size = 0.1) +
scale_fill_viridis(name = "ARG count \nnormalized by 16S")  +
labs(x = "Sample time (min) after runoff", y = "ARG") +
facet_nested(gene_class ~ treatment + plot, scales = "free", space = "free") + theme_classic() +
theme(
panel.background = element_rect(color = 'black', size = 1.4),
strip.text.x = element_text(size = 10, face = 'bold'),
strip.background = element_rect(colour = 'black', size = 1.4),
legend.position = "top",
legend.key.width = unit(.75, "in")
)
heatmap2  +
scale_y_discrete(
name = NULL,
labels = labels
) +
theme(
axis.text.y = element_markdown()
)
ggsave(filename = "../Figures/Fig4.jpeg", plot = last_plot(), device = "jpeg", units = "in", width = 7, height = 7, dpi = 300)
heatmap2$data
saveRDS(heatmap2$data, file = "../Data/hetmapdata.RDS")
levels(waterdata$treatment) <- list("CS" = "WCS", "CSM" = "WCSM", "CM" = "WCM")
heatmap2 <- ggplot(waterdata, aes(as.factor(sample_number), ordered(Assay, levels = levels))) +
geom_tile(aes(fill = norm), colour = "white", size = 0.1) +
scale_fill_viridis(name = "ARG count \nnormalized by 16S")  +
labs(x = "Sample time (min) after runoff", y = "ARG") +
facet_nested(gene_class ~ treatment + plot, scales = "free", space = "free") + theme_classic() +
theme(
text = element_text(size = global_size, family = "Times"),
legend.position = "top",
panel.background = element_rect(color = 'black', size = 1.4),
strip.text.x = element_text(size = 10, face = 'bold'),
strip.background = element_rect(colour = 'black', size = 1.4),
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
legend.position = "top",
legend.key.width = unit(.75, "in")
)
levels(waterdata$treatment) <- list("CS" = "WCS", "CSM" = "WCSM", "CM" = "WCM")
heatmap2 <- ggplot(waterdata, aes(as.factor(sample_number), ordered(Assay, levels = levels))) +
geom_tile(aes(fill = norm), colour = "white", size = 0.1) +
scale_fill_viridis(name = "ARG count \nnormalized by 16S")  +
labs(x = "Sample time (min) after runoff", y = "ARG") +
facet_nested(gene_class ~ treatment + plot, scales = "free", space = "free") + theme_classic() +
theme(
text = element_text(size = global_size, family = "Times"),
panel.background = element_rect(color = 'black', size = 1.4),
strip.text.x = element_text(size = 10, face = 'bold'),
strip.background = element_rect(colour = 'black', size = 1.4),
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
legend.position = "top",
legend.key.width = unit(.75, "in")
)
levels(waterdata$treatment) <- list("CS" = "WCS", "CSM" = "WCSM", "CM" = "WCM")
heatmap2 <- ggplot(waterdata, aes(as.factor(sample_number), ordered(Assay, levels = levels))) +
geom_tile(aes(fill = norm), colour = "white", size = 0.1) +
scale_fill_viridis(name = "ARG count \nnormalized by 16S")  +
labs(x = "Sample time (min) after runoff", y = "ARG") +
facet_nested(gene_class ~ treatment + plot, scales = "free", space = "free") + theme_classic() +
theme(
text = element_text(size = 12, family = "Times"),
panel.background = element_rect(color = 'black', size = 1.4),
strip.text.x = element_text(size = 10, face = 'bold'),
strip.background = element_rect(colour = 'black', size = 1.4),
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
legend.position = "top",
legend.key.width = unit(.75, "in")
)
heatmap2  +
scale_y_discrete(
name = NULL,
labels = labels
) +
theme(
axis.text.y = element_markdown()
)
ggsave(filename = "../Figures/Fig4.jpeg", plot = last_plot(), device = "jpeg", units = "in", width = 7, height = 7, dpi = 350)
heatmap2$data
saveRDS(heatmap2$data, file = "../Data/hetmapdata.RDS")
ggsave(filename = "../Figures/Fig4.jpeg", plot = last_plot(), device = "jpeg", units = "in", width = 7, height = 7.5, dpi = 350)
library(ggpubr)
library(rstatix)
is.na(SixS$SixSCount)
six <- SixS %>%
drop_na() %>%
filter(!rep %in% c(4,5,6))
six %>%
group_by(treatment) %>%
get_summary_stats(SixSCount, type = "mean_sd")
ggboxplot(six, x = "treatment", y = "SixSCount")
model <- lm(SixSCount ~ treatment, data = six)
ggqqplot(residuals(model))
shapiro_test(residuals(model))
six %>%
group_by(treatment) %>%
shapiro_test(SixSCount)
six %>%
levene_test(SixSCount ~ treatment)
six %>%
anova_test(SixSCount ~ treatment)
six %>%
welch_anova_test(SixSCount ~ treatment)
six %>%
kruskal_test(SixSCount ~ treatment)
res.aov <- six %>% anova_test(SixSCount ~ treatment)
res.aov
pwc <- six %>% tukey_hsd(SixSCount ~ treatment)
pwc
# Welch One way ANOVA test
res.aov2 <- six %>%
welch_anova_test(SixSCount ~ treatment)
res.aov2
# Pairwise comparisons (Games-Howell)
pwc2 <- six %>% games_howell_test(SixSCount ~ treatment)
# Visualization: box plots with p-values
pwc2 <- pwc2 %>% add_xy_position(x = "treatment", step.increase = .05)
ggboxplot(six, x = "treatment", y = "SixSCount") +
stat_pvalue_manual(pwc2, hide.ns = TRUE) +
labs(
subtitle = get_test_label(res.aov2, detailed = TRUE),
caption = get_pwc_label(pwc2)
)
six <- SixS %>%
drop_na() %>%
filter(!rep %in% c(4,5,6))
six <- six %>%
filter(!plot %in% c(4,9), !treatment == "WCS")
six %>%
group_by(treatment) %>%
get_summary_stats(SixSCount, type = "mean_sd")
# Welch One way ANOVA test
res.aov2 <- six %>%
welch_anova_test(SixSCount ~ treatment)
# Pairwise comparisons (Games-Howell)
pwc2 <- six %>%
games_howell_test(SixSCount ~ treatment)
# Visualization: box plots with p-values
pwc2 <- pwc2 %>% add_xy_position(x = "treatment", step.increase = .05)
ggboxplot(six, x = "treatment", y = "SixSCount") +
stat_pvalue_manual(pwc2, hide.ns = TRUE) +
labs(
subtitle = get_test_label(res.aov2, detailed = TRUE),
caption = get_pwc_label(pwc2)
)
res.aov2
pwc2
six <- SixS %>%
drop_na() %>%
filter(!rep %in% c(4,5,6))
six <- six %>%
filter(treatment == "WCS") # Switch this
six %>%
group_by(sample_number) %>%
get_summary_stats(SixSCount, type = "mean_sd")
# Welch One way ANOVA test
res.aov2 <- six %>%
welch_anova_test(SixSCount ~ sample_number)
# Pairwise comparisons (Games-Howell)
pwc2 <- six %>%
games_howell_test(SixSCount ~ sample_number)
# Visualization: box plots with p-values
pwc2 <- pwc2 %>% add_xy_position(x = "sample_number", step.increase = .05)
ggboxplot(six, x = "sample_number", y = "SixSCount") +
stat_pvalue_manual(pwc2, hide.ns = TRUE) +
labs(
subtitle = get_test_label(res.aov2, detailed = TRUE),
caption = get_pwc_label(pwc2)
)
res.aov2
pwc2
waterdata %>%
mutate(norm = replace_na(norm, 0)) %>% # Mutate NA to 0
filter(!rep %in% c(4,5,6)) %>%
group_by(treatment, Assay) %>%
get_summary_stats(norm, type = "mean_sd") %>%
arrange(desc(Assay))
test <- waterdata %>%
filter(!treatment == "CS") %>%
mutate(norm = replace_na(norm, 0)) %>%
filter(!rep %in% c(4,5,6)) %>%
droplevels()
test
data <- test %>%
group_by(Assay, treatment) %>%
dplyr::summarise(
n = n(),
mean = mean(norm),
sd = sd(norm)
)
data
test %>%
group_by(Assay) %>%
kruskal_test(norm ~ treatment) %>%
filter(p < 0.05)
test %>%
group_by(Assay) %>%
dunn_test(norm ~ treatment, p.adjust.method = "hochberg") %>%
filter(p < 0.05)
pwboxwithstats <- function(df, assay){
# Welch One way ANOVA test
test <- filter(df, Assay == assay)
res.aov2 <- test %>%
group_by(Assay) %>%
kruskal_test(norm ~ treatment)
res.aov2
# Pairwise comparisons (Games-Howell)
pwc2 <- test %>%
group_by(Assay) %>%
dunn_test(norm ~ treatment)
pwc2
# Visualization: box plots with p-values
pwc2 <- pwc2 %>% add_xy_position(x = "treatment", step.increase = .1)
p <- ggboxplot(test, x = "treatment", y = "norm") +
stat_pvalue_manual(pwc2, hide.ns = TRUE) +
labs(
title = paste0(test$Assay," concentration in runoffwater, normalized by 16S"),
subtitle = get_test_label(res.aov2, detailed = TRUE),
caption = get_pwc_label(pwc2)
)
return(p)
}
pwboxwithstats(test, "tetL")
pwboxwithstats(test, "tetH")
setdiff(stds$Assay, SoilCT$Assay)
setdiff(SoilCT$Assay, stds$Assay)
s <- stds %>%
drop_na("counts")
w <- SoilCT %>%
filter(!Assay %in% setdiff(SoilCT$Assay, stds$Assay))
w <- w %>%
select(plot, sample_day, treatment, Assay, Value, gene_class)
setdiff(s$Assay, w$Assay)
setdiff(w$Assay, s$Assay)
dput(unique(w$Assay)) # Use this list for the next map function
normby16s <- c("16S_Eub_338_518", "sul1", "tetW", "sul2", "erm(C)", "tetX",
"tetbP", "aadA9", "tetG", "tetH", "tetL",
"tetM", "IS6100", "tetT", "strB") %>%
map( ~ get_counts(s, w, gene = .x)) %>%
reduce(full_join)
#saveRDS(normby16s, file = "../data/WorArgBySixS.RDS") # note these are not normalized by 16s, just counts from standard curves
norms <- normby16s %>%
unite(ID, c("plot", "sample_day", "Assay"), sep = ".", remove = F) %>%
select(!Value) %>%
dplyr::group_by(plot, sample_day, Assay) %>%
dplyr::mutate(rep = seq_along(ID)) %>%
select(plot, sample_day, rep, treatment, Assay, gene_class, counts) %>%
ungroup()
SixS <- norms %>%
filter(Assay == "16S_Eub_338_518") %>%
dplyr::rename(SixSCount = counts) %>%
select(plot, sample_day, rep, SixSCount)
dfdf <- norms %>%
left_join(SixS, by = c("plot", "sample_day", "rep")) %>%
filter(!Assay == "16S_Eub_338_518")
# Now got to divide each count of each gene by the 16s number
test <- w %>% # Order ARGs based on class
arrange(gene_class)
levels <- dput(levels(factor(test$Assay)))
dfdf$treatment = factor(dfdf$treatment,
levels = c('WCS', 'WCSM', 'WCM'))
levels(dfdf$treatment)
levels(dfdf$treatment) <- list("CS" = "WCS", "CSM" = "WCSM", "CM" = "WCM")
heatmap2 <- ggplot(dfdf, aes(as.factor(sample_day), ordered(Assay, levels = levels))) +
geom_tile(aes(fill = counts/SixSCount), colour = "white", size = 0.1) +
scale_fill_viridis(name = "ARG count \nnormalized by 16S")  +
labs(x = "Sample day", y = "ARG") +
facet_nested(gene_class ~ treatment + plot, scales = "free", space = "free") + theme_classic() +
theme(
panel.background = element_rect(color = 'black', size = 1.4),
strip.text.x = element_text(size = 10, face = 'bold'),
strip.background = element_rect(colour = 'black', size = 1.4),
axis.text.x = element_text(angle = 45, hjust=1),
legend.position = "top",
legend.key.width = unit(.75, "in")
)
heatmap2 +
scale_y_discrete(
name = NULL,
labels = labels
) +
theme(
axis.text.y = element_markdown()
)
ggsave(filename = "plots/SoilARGnormcountHeat.png", plot = last_plot(), device = "png", units = "in", width = 6.5, height = 7.5, dpi = 300)
ggsave(filename = "../Figures/SoilARGnormcountHeat.png", plot = last_plot(), device = "png", units = "in", width = 6.5, height = 7.5, dpi = 300)
SixS <- norm %>%
filter(Assay == "16S_Eub_338_518")
SixS$treatment = factor(SixS$treatment,
levels = c('WCS', 'WCSM', 'WCM'))
levels(SixS$treatment) <- list("CS"="WCS", "CSM"="WCSM", "CM"="WCM")
SixS$sample_number <- as.factor(SixS$sample_number)
levels(SixS$sample_number) <- list("2.5" = "1", "7.5" = "2", "12.5" = "3", "17.5" = "4", "22.5" = "5", "27.5" = "6")
my_comparisons <- list( c("WCS", "WCSM"), c("WCS", "WCM"), c("WCM", "WCSM"))
sig <- SixS %>%
filter(!rep %in% c(4,5,6)) %>%
droplevels()
p <- ggplot(sig, aes(x=treatment, y=counts, fill = treatment)) +
geom_boxplot() +
labs(x = "Treatment", y = "Log 10 gene 16s copies") +
scale_y_continuous(trans = 'log10') +
scale_fill_viridis_d() +
facet_wrap( ~ sample_number) +
theme_pubr() +
theme(
legend.background = element_rect(
fill = (alpha = 0),
color = 'black',
size = 0.1),
panel.background = element_rect(color = 'black', size = 1.4),
strip.text.x = element_text(size = 10, face = 'bold'),
strip.background = element_rect(colour = 'black', size = 1.4),
legend.position = "none")
p
krusk.test <- sig %>%
group_by(sample_number) %>%
kruskal_test(counts ~ treatment)
krusk.test
stat.test <- sig %>%
group_by(sample_number) %>%
dunn_test(counts ~ treatment) %>%
adjust_pvalue(method = "hochberg") %>%
mutate(y.position = rep(c(log10(100000), log10(300000), log10(1000000)), 6))
stat.test
p <- ggboxplot(sig, x = "treatment", y = "counts", facet.by = "sample_number") +
scale_y_continuous(trans = "log10")
p +
stat_pvalue_manual(stat.test, hide.ns = T) +
theme_pubr() +
labs(x = "Treatment", y = "Log 10 gene 16s copies",
caption = get_pwc_label(stat.test))
ggsave(filename = "../Figures/WorleWater16SCountsBoxPlot.png", plot = last_plot(), device = "png", units = "in", width = 6.5, height = 7.5, dpi = 300)
sig <- norm %>%
filter(Assay == "tetL") %>%
droplevels()
sig
stat.test <- sig %>%
group_by(plot) %>%
dunn_test(counts ~ treatment) %>%
adjust_pvalue(method = "hochberg") %>%
mutate(y.position = rep(c(log10(100000), log10(300000), log10(1000000)), 6))
p <- ggboxplot(sig, x = "treatment", y = "norm", facet.by = "sample_number")
p +
stat_pvalue_manual(stat.test, hide.ns = T) +
theme_pubr() +
labs(x = "Treatment", y = "16S normalized *tetL*",
caption = get_pwc_label(stat.test))
df <- SixS %>%
filter(!rep %in% c(4,5,6)) %>%
drop_na() %>%
droplevels()
pd <- df %>%
group_by(sample_number, treatment) %>%
dplyr::summarise(
n = n(),
mean = mean(counts),
sd = sd(counts)
) %>%
mutate(se = sd/sqrt(n))  %>%
mutate(ic = se * qt((1-0.05)/2 + .5, n-1))
siglabel <- df %>%
group_by(sample_number) %>%
dunn_test(counts ~ treatment, p.adjust.method = "hochberg") %>%
filter(p.adj < 0.05) %>%
rstatix::add_significance("p") %>%
rstatix::add_xy_position()
ggplot(pd, aes(x = treatment, y = mean)) + geom_bar(stat = "identity") +
geom_errorbar( aes(x = treatment, ymin = mean - ic, ymax = mean + ic), width = 0.2, colour = "black", size= 0.5) +
ggpubr::stat_pvalue_manual(siglabel, label = "p.signif") +
facet_grid(. ~ sample_number)
