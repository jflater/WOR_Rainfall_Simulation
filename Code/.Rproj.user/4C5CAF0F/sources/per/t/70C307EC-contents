---
title: "WOR ARG and MAB"
output: html_document
---

To run this markdown, be sure that the "biomark-bioinformatics" folder is located in your Documents directory, or change the directory to the correct folder in the first chunk.

# ```{r setup, include=FALSE}
# knitr::opts_chunk$set(echo = TRUE)
# knitr::opts_knit$set(root.dir = "~/Documents/biomark-bioinformatics/")
# ```

```{r libraries, include=FALSE}
library(tidyverse)
library(ggh4x)
library(viridis)
library(phyloseq)
library(phylosmith)
library(venn)
library(ggtext)
```

```{r setwd and read data, include=FALSE}
df <- readRDS("../Data/metawithbiomark.RDS") 
# Make Value column numeric
df$Value <- as.numeric(df$Value)
unique(df$Assay)
unique(df$Sample_Name)
# Rename two Assays and Sample_Names, tetG_F and sul1 NEW
df$Assay <- recode(df$Assay,
                   "sul1 NEW" = "sul1",
                   "tetG_F" = "tetG")
df$Sample_Name <- recode(df$Sample_Name,
                   "sul1 NEW" = "sul1",
                   "tetG_F" = "tetG")
df$treatment
```

```{r subset biomark}
soil <- df %>%
  filter(sample_type %in% "soil")
water <- df %>%
  filter(sample_type %in% "water") 
manure <- df %>%
  filter(sample_type %in% "manure")
control <- df %>%
  filter(sample_type %in% "control")
standard <- df %>%
  filter(sample_type %in% "standard")
```

Antibiotic resistance genes and 16S in poultry manure

```{r summarize and plot functions}
#+++++++++++++++++++++++++
# Function to calculate the mean and the standard deviation
  # for each group
#+++++++++++++++++++++++++
# data : a data frame
# varname : the name of a column containing the variable
  #to be summariezed
# groupnames : vector of column names to be used as
  # grouping variables

data_summary <- function(data, varname, groupnames){
  require(plyr)
  summary_func <- function(x, col){
    c(mean = mean(x[[col]], na.rm=TRUE),
      sd = sd(x[[col]], na.rm=TRUE))
  }
  data_sum <- plyr::ddply(data, groupnames, .fun=summary_func,
                  varname)
  data_sum <- plyr::rename(data_sum, c("mean" = varname))
 return(data_sum)
}

CT_BAR_PLOT <- function(df){
  plot <- df %>%
   filter(Call == "Pass") %>%
   data_summary(varname = "Value", groupnames = c("Assay")) %>%
   ggplot(aes(x = reorder(Assay, -Value), y = Value)) +
     geom_bar(stat="identity", color="black", 
            position=position_dodge()) +
     geom_errorbar(aes(ymin=Value-sd, ymax=Value+sd), width=.2,
                  position=position_dodge(.9))  +
     theme_minimal() +
     theme(legend.position = "none") +
     coord_flip() +
     labs(y = "Mean cycle time", x = "Assay")
  return(plot)
}
```

```{r plot manure ct}
manure_plot <- CT_BAR_PLOT(manure)

manure_plot
ggsave(filename = "../Figures/poultrymanureCT.png", plot = last_plot(), device = "png", units = "in", width = 3.25, height = 4.5, dpi = 300)

rm(manure_plot)
library(dplyr)
```

# Soil ARGs

```{r soil ARGS}
soil_plot <- CT_BAR_PLOT(soil %>%
  filter(treatment %in% c("WCS") | sample_day %in% c("TB")) %>%
  filter(Call %in% c("Pass")))
soil_plot

# Which ARGs are unique to soil? 
Soil_ARGs <- soil %>%
  filter(treatment %in% c("WCS") | sample_day %in% c("TB")) %>%
  filter(Call %in% c("Pass")) %>%
  select(Assay) %>%
  distinct()

man_ARGS <- manure %>%
  filter(Call %in% c("Pass")) %>%
  select(Assay) %>%
  distinct()
```

```{r venn ARGs}
Soil_ARGs
man_ARGS

worle_vvv_diag <- venn(list("Manure_ARGs" = man_ARGS$Assay, "Soil_ARGs" = Soil_ARGs$Assay))
worle_vvv_diag

worle_manure_ARGs <- attr(worle_vvv_diag, "intersections")$Manure_ARGs
worle_soil_ARGs <- attr(worle_vvv_diag, "intersections")$Soil_ARGs
worle_common_ARGs <- attr(worle_vvv_diag, 'intersections')$`Manure_ARGs:Soil_ARGs`
```

ARGs unique to manure:

```{r}
worle_manure_ARGs
worle_soil_ARGs
worle_common_ARGs
```

```{r soil ct}
# 3 gray colors
pal <- viridis(3)

poop <- rep(pal[1], times = length(worle_manure_ARGs)) 
names(poop) <- worle_manure_ARGs

soils <- rep(pal[2], times = length(worle_soil_ARGs))
names(soils) <- worle_soil_ARGs

common <- rep(pal[3], times = length(worle_common_ARGs))
names(common) <- worle_common_ARGs

poop_colors <- c(poop, soils, common)
poop_colors
```

We can color the ARGs from manure, they will be black in this plot

```{r soil plot with mans highlighted}
soil_plot_mans <- CT_BAR_PLOT(soil) +
  geom_bar(stat = "identity", aes(fill = Assay))
    
soil_plot_mans + scale_color_manual(aesthetics = "fill", values = poop_colors)

ggsave(filename = "../Figures/soilCT.png", plot = last_plot(), device = "png", units = "in", width = 3.25, height = 4.5, dpi = 300)


#"<img src='~/Desktop/pile-of-poo_1f4a9.png' width='50' /><br>*Poop*"

labels <- c(tetbP = "<img src='../Figures/pile-of-poo_1f4a9-50x50.png' 
              width='10' <br>tetbP", 
            aphA3 = "<img src='../Figures/pile-of-poo_1f4a9-50x50.png' 
              width='10' <br>aphA3", 
            tetT = "<img src='../Figures/pile-of-poo_1f4a9-50x50.png' 
              width='10' <br>tetT", 
            tetW = "<img src='../Figures/pile-of-poo_1f4a9-50x50.png' 
              width='10' <br>tetW", 
            `erm(C)` = "<img src='../Figures/pile-of-poo_1f4a9-50x50.png' 
              width='10' <br>erm(C)", 
            tetX = "<img src='../Figures/pile-of-poo_1f4a9-50x50.png' 
              width='10' <br>tetX", 
            tnpA1 = "<img src='../Figures/pile-of-poo_1f4a9-50x50.png' 
              width='10' <br>tnpA1",
            tetH = "<img src='../Figures/pile-of-poo_1f4a9-50x50.png' 
              width='10' <br>tetH", 
            lnuA = "<img src='../Figures/pile-of-poo_1f4a9-50x50.png' 
              width='10' <br>lnuA", 
            tnpA5 = "<img src='../Figures/pile-of-poo_1f4a9-50x50.png' 
              width='10' <br>tnpA5", 
            tetM = "<img src='../Figures/pile-of-poo_1f4a9-50x50.png' 
              width='10' <br>tetM", 
            cmr = "<img src='../Figures/pile-of-poo_1f4a9-50x50.png' 
              width='10' <br>cmr")

```

ARGs from unique to manure are colored blue, those unique to soil are colored pink and those ARGs common to manure free soil and manure are yellow

```{r soil heatmap}
SoilCT <- soil %>%
  select(Sample_Name, plot, sample_day, treatment, Assay, Value, Call, soil_type) 

SoilCT$Value[SoilCT$Value>30]<- NA # Change high CT

SoilCT$Treatment_f = factor(SoilCT$treatment, 
                            levels = c('WCS', 'WCSM', 'WCM'),
                            labels = c("CS", "CSM", "CM")) # Change order of factors, WCS is kinda like control
unique(SoilCT$Assay)
SoilCT <- SoilCT %>% # Add classes to ARGs
  mutate(gene_class = case_when(Assay %in% unique(SoilCT$Assay[grepl("^[aa]", SoilCT$Assay)]) ~ "AMG",
                                Assay %in% unique(SoilCT$Assay[grepl("^[erm]", SoilCT$Assay)]) ~ "MLSB",
                                Assay %in% unique(SoilCT$Assay[grepl("^[sul]", SoilCT$Assay)]) ~ "Sulfa",
                                Assay %in% unique(SoilCT$Assay[grepl("tet", SoilCT$Assay)]) ~ "Tet",
                                Assay %in% c("intl1", "intl2", "intl3", "IS1247", "IS6100", "tnpA2",
                                             "tnpA5", "tnpA6", "tnpA3", "intI1F165_clinical", "tnpA1", "int1-a-marko", "tnpA7") ~ "MGE", 
                                Assay %in% c("cadC", "cmr") ~ "HM",
                                Assay == c("16S_Eub_338_518") ~ "16S"))

SoilCT$gene_class_f = factor(SoilCT$gene_class, # Order the classes
                              levels = c('AMG', 'MLSB', 'Sulfa', "Tet", "MGE", "HM", "16S"))

test <- SoilCT %>% # Order ARGs based on class
  arrange(gene_class) 

levels <- dput(levels(factor(test$Assay))) # dput ftw!!!

heatmap <- ggplot(SoilCT, aes(as.factor(sample_day), ordered(Assay, levels = levels))) +
  geom_tile(aes(fill = Value), colour = "white", size = 0.1) +
  scale_fill_viridis(name = "Gene CT", option = "plasma")  +
  labs(x = "Sample Day", y = "Gene") +
  facet_nested(gene_class_f ~ Treatment_f + plot, scales = "free", space = "free") + theme_classic() +
  theme(
    legend.background = element_rect(
      fill = (alpha = 0),
      color = 'black',
      size = 0.1),
    panel.background = element_rect(color = 'black', size = 1.4),
    strip.text.x = element_text(size = 10, face = 'bold'),
    strip.background = element_rect(colour = 'black', size = 1.4),
    axis.text.x = element_text(angle = 90)
  ) 
labels
heatmap +
  scale_y_discrete(
    name = NULL,
    labels = labels
  ) +
  theme(
    axis.text.y = element_markdown()
  ) 


ggsave(filename = "../Figures/soilCTheatmap.png", plot = last_plot(), device = "png", units = "in", width = 6.5, height = 9, dpi = 300)
```

Look at manured strip for only manure ARGs

```{r manured strip soil CT only manure ARGs}
SoilPoop <- SoilCT %>%
  filter(treatment %in% c("WCSM")) %>%
  filter(Assay %in% worle_manure_ARGs)

heatmap <- ggplot(SoilPoop, aes(as.factor(sample_day), ordered(Assay, levels = levels))) +
  geom_tile(aes(fill = Value), colour = "white", size = 0.1) +
  scale_fill_viridis(name = "Gene CT", option = "plasma")  +
  labs(x = "Sample Day", y = "Gene") +
  facet_nested(gene_class_f ~ plot + soil_type, scales = "free", space = "free") + theme_classic() +
  theme(
    legend.background = element_rect(
      fill = (alpha = 0),
      color = 'black',
      size = 0.1),
    panel.background = element_rect(color = 'black', size = 1.4),
    strip.text.x = element_text(size = 10, face = 'bold'),
    strip.background = element_rect(colour = 'black', size = 1.4),
    axis.text.x = element_text(angle = 90)
  ) 

heatmap
```

We don't see any manure associated ARGs in the soil of this treatment, which is surprising because manure was applied to the crop soils.

```{r manured crop soil CT only manure ARGs}
SoilPoop <- SoilCT %>%
  filter(treatment %in% c("WCM")) %>%
  filter(Assay %in% worle_manure_ARGs)

heatmap <- ggplot(SoilPoop, aes(as.factor(sample_day), ordered(Assay, levels = levels))) +
  geom_tile(aes(fill = Value), colour = "white", size = 0.1) +
  scale_fill_viridis(name = "Gene CT", option = "plasma")  +
  labs(x = "Sample Day", y = "Gene") +
  facet_nested(gene_class_f ~ plot + soil_type, scales = "free", space = "free") + theme_classic() +
  theme(
    legend.background = element_rect(
      fill = (alpha = 0),
      color = 'black',
      size = 0.1),
    panel.background = element_rect(color = 'black', size = 1.4),
    strip.text.x = element_text(size = 10, face = 'bold'),
    strip.background = element_rect(colour = 'black', size = 1.4),
    axis.text.x = element_text(angle = 90)
  ) 

heatmap
```

Even the plots in the manured control (7, 8, 9) showed very little manure associated ARGs

We can conclude that manure associated ARGs do not readily persist in soils to 15cm 

We need to look into the runoff water for manure associated ARGs

```{r}
# Move on to normalizing by 16s 
PC_Standards_no_NA <- readRDS("../Data/ampliconlengths.RDS")

options(scipen = 999)
PC_Standards_no_NA$Assay <- recode(PC_Standards_no_NA$Assay,
                                   "sul1 NEW" = "sul1",
                                   "tetG_F" = "tetG")
PC_Standards_no_NA$Assay
```

```{r}
standard
unique(standard$Assay)
unique(standard$Sample_Name)

intersect(standard$Assay, standard$Sample_Name)
setdiff(standard$Assay, standard$Sample_Name)
setdiff(standard$Sample_Name, standard$Assay) 
# note int-a-marko errror, not important for now, but change spelling at some spoint

st <- standard %>%
  filter(Call == "Pass", Sample_Name == Assay) 
st
```

```{r}
#x <- c("Here", "There")
#y <- c("Here", "Where")
#union(x, y) # Combine 
#intersect(x, y) # In both
#intersect(y, x) # in both
#setdiff(x, y) # only in x
#
length(intersect(st$Assay, PC_Standards_no_NA$Assay))
intersect(st$Assay, PC_Standards_no_NA$Assay)

x <- st$Assay
y <- PC_Standards_no_NA$Assay

standardAssays <- setdiff(x, y) # only in x

PCAssays <- setdiff(y, x) # only in y
print("in standard") 
standardAssays# in standard
print("in PC standard")
PCAssays # in PC_standard
```

```{r}
head(st)
head(PC_Standards_no_NA)
unique(st$Assay)
unique(st$Assay)

std_venn <- venn(list("Standard Assay" = st$Assay, "Standard Sample Name" = st$Sample_Name))
std_venn

standard1 <- st %>%
  filter(Sample_Name == Assay)
length(unique(standard1$Assay))
standard2 <- st %>%
  filter(Sample_Name != Assay)
```

```{r}
# plot standard curve from biomark standards using expected copy numbers based on amplicon length for each Assay
plot_standard_curve_counts <- function(standards, gene){
  
  std <- standards %>%
    filter(Sample_Name == Assay, Assay == gene, Value < 990) %>%
    left_join(PC_Standards_no_NA) %>%
    select(Assay, rConc, Value, amp_len) %>%
    mutate(counts = as.numeric(rConc) * (1/(10^9)) * (1/660) * ((6.023*10^23)/1) * (1/as.numeric(amp_len)) * (.0067)) 
  
  return(std)
}

stds <- unique(water$Assay) %>%
  map( ~ plot_standard_curve_counts(st, gene = .x)) %>%
  reduce(full_join)

# Check standards for NA
stds[rowSums(is.na(stds)) > 0, ] 


get_counts <- function(stddf, ctdf, gene){
  # stddf <- stds # use to test
  # ctdf <- SoilCT # use to test
  # gene <- "tetM" # use to test
  std <- stddf %>%
    filter(Assay == gene)
  ctd <- ctdf %>%
    filter(Assay == gene)
  inverse.lm <- lm(data = std, formula = log10(counts+1) ~ as.numeric(Value)) # Note log10 transformation
  
  val2 <- ctd$Value
  
  ctd$counts <- 10 ^ predict(inverse.lm ,data.frame(Value = val2), interval = "predict")[,1] 
  return(ctd)
}
```

# Water ARGs

```{r}
WaterCT <- water %>%
  filter(Sample_Name != "Supply_Water") %>% # Remove 16s for ARG plot
  select(Sample_Name, plot, sample_number, treatment, Assay, Value) 

WaterCT$Value <- as.numeric(WaterCT$Value) # Make numeric
max(WaterCT$Value[WaterCT$Value < 900])
# The highest value less than 999 is 28.9, so changing everything above 30 to NA

WaterCT$Value[WaterCT$Value > 30] <- NA # Change high CT

WaterCT$Treatment_f = factor(WaterCT$treatment, 
                            levels = c('WCS', 'WCSM', 'WCM'),
                            labels = c("CS", "CSM", "CM")) # Change order of factors, WCS is kinda like control

unique(WaterCT$Assay)
WaterCT <- WaterCT %>% # Add classes to ARGs
  mutate(gene_class = case_when(Assay %in% unique(WaterCT$Assay[grepl("^[aa]", WaterCT$Assay)]) ~ "AMG",
                                Assay %in% unique(WaterCT$Assay[grepl("^[erm]", WaterCT$Assay)]) ~ "MLSB",
                                Assay %in% unique(WaterCT$Assay[grepl("^[sul]", WaterCT$Assay)]) ~ "Sulfa",
                                Assay %in% unique(WaterCT$Assay[grepl("tet", WaterCT$Assay)]) ~ "Tet",
                                Assay %in% c("intl1", "intl2", "intl3", "IS1247", "IS6100", "tnpA2",
                                              "tnpA5", "tnpA6", "tnpA3", "intI1F165_clinical", "tnpA1", "int1-a-marko", "tnpA7") ~ "MGE", 
                                Assay %in% c("cadC", "cmr") ~ "HM",
                                Assay == c("16S_Eub_338_518") ~ "16S"))

WaterCT$gene_class_f = factor(WaterCT$gene_class, # Order the classes
                                levels = c('AMG', 'MLSB', 'Sulfa', "Tet", "MGE", "HM", "16S"))

test <- WaterCT %>% # Order ARGs based on class
  arrange(gene_class) 
  
levels <- dput(levels(factor(test$Assay))) # dput ftw!!!

heatmap <- ggplot(WaterCT, aes(as.factor(sample_number), ordered(Assay, levels = levels))) +
  geom_tile(aes(fill = Value), colour = "white", size = 0.1) +
  scale_fill_viridis(name = "Gene CT", option = "plasma")  +
  labs(x = "Sample Time (min)", y = "Gene") +
  facet_nested(gene_class_f ~ Treatment_f + plot, scales = "free", space = "free") + theme_classic() +
  theme(
    legend.background = element_rect(
      fill = (alpha = 0),
      color = 'black',
      size = 0.1),
    panel.background = element_rect(color = 'black', size = 1.4),
    strip.text.x = element_text(size = 10, face = 'bold'),
    strip.background = element_rect(colour = 'black', size = 1.4)
  )  +
  scale_y_discrete(
    name = NULL,
    labels = labels
  ) +
  theme(
    axis.text.y = element_markdown(color = "black", size = 11)
  ) 
heatmap

ggsave(filename = "../Figures/waterCTheatmap.png", plot = last_plot(), device = "png", units = "in", width = 6.5, height = 7.5, dpi = 300)
```

Due to how biomark reports CT values, those that are non-detects have a very high CT and it skews our color pallette, if we convert these high values to NA, then we get a nice plot. See line 339 and 342, our highest CT less than 900 is 28 or so, let's change everything above 30 to NA.

```{r}
# To fix I need to make sure that s and w are the same, use setdiff and change the order of the arguments
setdiff(stds$Assay, WaterCT$Assay)
setdiff(WaterCT$Assay, stds$Assay)
s <- stds %>%
  drop_na("counts")

w <- WaterCT %>%
  filter(!Assay %in% setdiff(WaterCT$Assay, stds$Assay))

w <- w %>%
  select(plot, sample_number, treatment, Assay, Value, gene_class)

setdiff(stds$Assay, w$Assay)
setdiff(w$Assay, stds$Assay)

dput(unique(w$Assay)) # Use this list for the next map function

# map this list of standards and counts to the biomark data to generate counts
normby16s <- c("16S_Eub_338_518", "sul1", "tetW", "sul2", "erm(C)", "tetX", 
"tetbP", "aadA9", "tetG", "tetH", "tetL", 
"tetM", "IS6100", "tetT", "strB") %>%
  map( ~ get_counts(s, w, gene = .x)) %>%
  reduce(full_join)

#saveRDS(normby16s, file = "../data/WorArgBySixS.RDS") # note these are not normalized by 16s, just counts from standard curves

norm <- normby16s %>%
  unite(ID, c("plot", "sample_number", "Assay"), sep = ".", remove = F) %>%
  select(!Value) %>%
  dplyr::group_by(plot, sample_number, Assay) %>%
  dplyr::mutate(rep = seq_along(ID)) %>%
  select(plot, sample_number, rep, treatment, Assay, gene_class, counts) %>%
  ungroup()

SixS <- norm %>%
  filter(Assay == "16S_Eub_338_518") %>%
  dplyr::rename(SixSCount = counts) %>%
  select(plot, sample_number, rep, SixSCount, treatment) 

dfdf <- norm %>%
  left_join(SixS, by = c("plot", "sample_number", "rep", "treatment")) %>%
  filter(!Assay == "16S_Eub_338_518")

# Now got to divide each count of each gene by the 16s number

test <- w %>% # Order ARGs based on class
  arrange(gene_class) 

levels <- dput(levels(factor(test$Assay))) # dput ftw!!!
dfdf$treatment = factor(dfdf$treatment, 
                             levels = c('WCS', 'WCSM', 'WCM'))
dfdf$sample_number <- as.factor(dfdf$sample_number)
levels(dfdf$sample_number) <- list("2.5" = "1", "7.5" = "2", "12.5" = "3", "17.5" = "4", "22.5" = "5", "27.5" = "6")


```

```{r}
waterdata <- dfdf %>%
  mutate(norm = counts/SixSCount)
```


```{r}

levels(waterdata$treatment) <- list("CS" = "WCS", "CSM" = "WCSM", "CM" = "WCM")

heatmap2 <- ggplot(waterdata, aes(as.factor(sample_number), ordered(Assay, levels = levels))) +
  geom_tile(aes(fill = norm), colour = "white", size = 0.1) +
  scale_fill_viridis(name = "ARG count \nnormalized by 16S")  +
  labs(x = "Sample time (min) after runoff", y = "ARG") +
  facet_nested(gene_class ~ treatment + plot, scales = "free", space = "free") + theme_classic() +
  theme(
    text = element_text(size = 12, family = "Times"),
    panel.background = element_rect(color = 'black', size = 1.4),
    strip.text.x = element_text(size = 10, face = 'bold'),
    strip.background = element_rect(colour = 'black', size = 1.4),
    axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
    legend.position = "top",
    legend.key.width = unit(.75, "in")
  ) 

heatmap2  +
  scale_y_discrete(
    name = NULL,
    labels = labels
  ) +
  theme(
    axis.text.y = element_markdown()
  )

ggsave(filename = "../Figures/Fig4.jpeg", plot = last_plot(), device = "jpeg", units = "in", width = 7, height = 7.5, dpi = 350)

heatmap2$data

saveRDS(heatmap2$data, file = "../Data/hetmapdata.RDS")
```
```{r}
library(ggpubr)
library(rstatix)
```


```{r}
is.na(SixS$SixSCount)

six <- SixS %>%
  drop_na() %>%
  filter(!rep %in% c(4,5,6))

six %>%
  group_by(treatment) %>%
  get_summary_stats(SixSCount, type = "mean_sd")
```


```{r}
ggboxplot(six, x = "treatment", y = "SixSCount")

model <- lm(SixSCount ~ treatment, data = six)
ggqqplot(residuals(model))

shapiro_test(residuals(model))

six %>%
  group_by(treatment) %>%
  shapiro_test(SixSCount)

six %>%
  levene_test(SixSCount ~ treatment)

six %>%
  anova_test(SixSCount ~ treatment)

six %>%
  welch_anova_test(SixSCount ~ treatment)

six %>%
  kruskal_test(SixSCount ~ treatment)
```
```{r}
res.aov <- six %>% anova_test(SixSCount ~ treatment)
res.aov
```
```{r}
pwc <- six %>% tukey_hsd(SixSCount ~ treatment)
pwc
```

```{r}
# Welch One way ANOVA test
res.aov2 <- six %>% 
  welch_anova_test(SixSCount ~ treatment)
res.aov2
# Pairwise comparisons (Games-Howell)
pwc2 <- six %>% games_howell_test(SixSCount ~ treatment)
# Visualization: box plots with p-values
pwc2 <- pwc2 %>% add_xy_position(x = "treatment", step.increase = .05)
ggboxplot(six, x = "treatment", y = "SixSCount") +
  stat_pvalue_manual(pwc2, hide.ns = TRUE) +
  labs(
    subtitle = get_test_label(res.aov2, detailed = TRUE),
    caption = get_pwc_label(pwc2)
    )
```
# 16S no plot 4 or 9
```{r}
six <- SixS %>%
  drop_na() %>%
  filter(!rep %in% c(4,5,6))

six <- six %>%
  filter(!plot %in% c(4,9), !treatment == "WCS") 

six %>%
  group_by(treatment) %>%
  get_summary_stats(SixSCount, type = "mean_sd")

# Welch One way ANOVA test
res.aov2 <- six %>% 
  welch_anova_test(SixSCount ~ treatment)

# Pairwise comparisons (Games-Howell)
pwc2 <- six %>% 
  games_howell_test(SixSCount ~ treatment)

# Visualization: box plots with p-values
pwc2 <- pwc2 %>% add_xy_position(x = "treatment", step.increase = .05)

ggboxplot(six, x = "treatment", y = "SixSCount") +
  stat_pvalue_manual(pwc2, hide.ns = TRUE) +
  labs(
    subtitle = get_test_label(res.aov2, detailed = TRUE),
    caption = get_pwc_label(pwc2)
    )

res.aov2
pwc2
```

Difference over time for each treatment? 
```{r}
six <- SixS %>%
  drop_na() %>%
  filter(!rep %in% c(4,5,6))

six <- six %>%
  filter(treatment == "WCS") # Switch this 

six %>%
  group_by(sample_number) %>%
  get_summary_stats(SixSCount, type = "mean_sd")

# Welch One way ANOVA test
res.aov2 <- six %>% 
  welch_anova_test(SixSCount ~ sample_number)

# Pairwise comparisons (Games-Howell)
pwc2 <- six %>% 
  games_howell_test(SixSCount ~ sample_number)

# Visualization: box plots with p-values
pwc2 <- pwc2 %>% add_xy_position(x = "sample_number", step.increase = .05)

ggboxplot(six, x = "sample_number", y = "SixSCount") +
  stat_pvalue_manual(pwc2, hide.ns = TRUE) +
  labs(
    subtitle = get_test_label(res.aov2, detailed = TRUE),
    caption = get_pwc_label(pwc2)
    )

res.aov2
pwc2
```


```{r}
waterdata %>%
  mutate(norm = replace_na(norm, 0)) %>% # Mutate NA to 0
  filter(!rep %in% c(4,5,6)) %>%
  group_by(treatment, Assay) %>%
  get_summary_stats(norm, type = "mean_sd") %>%
  arrange(desc(Assay))

test <- waterdata %>%
  filter(!treatment == "CS") %>%
  mutate(norm = replace_na(norm, 0)) %>%
  filter(!rep %in% c(4,5,6)) %>%
  droplevels()
test
```


```{r}
data <- test %>%
  group_by(Assay, treatment) %>%
  dplyr::summarise(
    n = n(),
    mean = mean(norm),
    sd = sd(norm)
  )
data
```
```{r}
test %>%
  group_by(Assay) %>%
  kruskal_test(norm ~ treatment) %>%
  filter(p < 0.05)
```
```{r}
test %>%
  group_by(Assay) %>%
  dunn_test(norm ~ treatment, p.adjust.method = "hochberg") %>%
  filter(p < 0.05)
```
```{r}
pwboxwithstats <- function(df, assay){
    # Welch One way ANOVA test
    test <- filter(df, Assay == assay)
    res.aov2 <- test %>% 
      group_by(Assay) %>%
      kruskal_test(norm ~ treatment)
    res.aov2
    # Pairwise comparisons (Games-Howell)
    pwc2 <- test %>% 
      group_by(Assay) %>%
      dunn_test(norm ~ treatment)
    pwc2
    # Visualization: box plots with p-values
    pwc2 <- pwc2 %>% add_xy_position(x = "treatment", step.increase = .1)
    p <- ggboxplot(test, x = "treatment", y = "norm") +
      stat_pvalue_manual(pwc2, hide.ns = TRUE) +
      labs(
        title = paste0(test$Assay," concentration in runoffwater, normalized by 16S"),
        subtitle = get_test_label(res.aov2, detailed = TRUE),
        caption = get_pwc_label(pwc2)
        ) 
    return(p)
}

pwboxwithstats(test, "tetL")

pwboxwithstats(test, "tetH")


```


```{r soil normalized}
setdiff(stds$Assay, SoilCT$Assay)
setdiff(SoilCT$Assay, stds$Assay)
s <- stds %>%
  drop_na("counts")

w <- SoilCT %>%
  filter(!Assay %in% setdiff(SoilCT$Assay, stds$Assay))

w <- w %>%
  select(plot, sample_day, treatment, Assay, Value, gene_class)

setdiff(s$Assay, w$Assay)
setdiff(w$Assay, s$Assay)

dput(unique(w$Assay)) # Use this list for the next map function

normby16s <- c("16S_Eub_338_518", "sul1", "tetW", "sul2", "erm(C)", "tetX", 
"tetbP", "aadA9", "tetG", "tetH", "tetL", 
"tetM", "IS6100", "tetT", "strB") %>%
  map( ~ get_counts(s, w, gene = .x)) %>%
  reduce(full_join)

#saveRDS(normby16s, file = "../data/WorArgBySixS.RDS") # note these are not normalized by 16s, just counts from standard curves

norms <- normby16s %>%
  unite(ID, c("plot", "sample_day", "Assay"), sep = ".", remove = F) %>%
  select(!Value) %>%
  dplyr::group_by(plot, sample_day, Assay) %>%
  dplyr::mutate(rep = seq_along(ID)) %>%
  select(plot, sample_day, rep, treatment, Assay, gene_class, counts) %>%
  ungroup()

SixS <- norms %>%
  filter(Assay == "16S_Eub_338_518") %>%
  dplyr::rename(SixSCount = counts) %>%
  select(plot, sample_day, rep, SixSCount) 

dfdf <- norms %>%
  left_join(SixS, by = c("plot", "sample_day", "rep")) %>%
  filter(!Assay == "16S_Eub_338_518")

# Now got to divide each count of each gene by the 16s number

test <- w %>% # Order ARGs based on class
  arrange(gene_class) 

levels <- dput(levels(factor(test$Assay))) 
dfdf$treatment = factor(dfdf$treatment, 
                        levels = c('WCS', 'WCSM', 'WCM'))

levels(dfdf$treatment)
levels(dfdf$treatment) <- list("CS" = "WCS", "CSM" = "WCSM", "CM" = "WCM")


heatmap2 <- ggplot(dfdf, aes(as.factor(sample_day), ordered(Assay, levels = levels))) +
  geom_tile(aes(fill = counts/SixSCount), colour = "white", size = 0.1) +
  scale_fill_viridis(name = "ARG count \nnormalized by 16S")  +
  labs(x = "Sample day", y = "ARG") +
  facet_nested(gene_class ~ treatment + plot, scales = "free", space = "free") + theme_classic() +
  theme(
    panel.background = element_rect(color = 'black', size = 1.4),
    strip.text.x = element_text(size = 10, face = 'bold'),
    strip.background = element_rect(colour = 'black', size = 1.4),
    axis.text.x = element_text(angle = 45, hjust=1),
    legend.position = "top",
    legend.key.width = unit(.75, "in")
  ) 

heatmap2 +
  scale_y_discrete(
    name = NULL,
    labels = labels
  ) +
  theme(
    axis.text.y = element_markdown()
  )

ggsave(filename = "../Figures/SoilARGnormcountHeat.png", plot = last_plot(), device = "png", units = "in", width = 6.5, height = 7.5, dpi = 300)
```

```{r}
SixS <- norm %>%
  filter(Assay == "16S_Eub_338_518") 

SixS$treatment = factor(SixS$treatment, 
                             levels = c('WCS', 'WCSM', 'WCM'))
levels(SixS$treatment) <- list("CS"="WCS", "CSM"="WCSM", "CM"="WCM")
SixS$sample_number <- as.factor(SixS$sample_number)
levels(SixS$sample_number) <- list("2.5" = "1", "7.5" = "2", "12.5" = "3", "17.5" = "4", "22.5" = "5", "27.5" = "6")

my_comparisons <- list( c("WCS", "WCSM"), c("WCS", "WCM"), c("WCM", "WCSM"))
sig <- SixS %>%
  filter(!rep %in% c(4,5,6)) %>%
  droplevels()

p <- ggplot(sig, aes(x=treatment, y=counts, fill = treatment)) + 
  geom_boxplot() +
  labs(x = "Treatment", y = "Log 10 gene 16s copies") +
  scale_y_continuous(trans = 'log10') +
  scale_fill_viridis_d() +
  facet_wrap( ~ sample_number) +
  theme_pubr() +
  theme(
    legend.background = element_rect(
      fill = (alpha = 0),
      color = 'black',
      size = 0.1),
    panel.background = element_rect(color = 'black', size = 1.4),
    strip.text.x = element_text(size = 10, face = 'bold'),
    strip.background = element_rect(colour = 'black', size = 1.4),
    legend.position = "none") 
p  
```
```{r}
krusk.test <- sig %>%
  group_by(sample_number) %>%
  kruskal_test(counts ~ treatment)
krusk.test

stat.test <- sig %>%
  group_by(sample_number) %>%
  dunn_test(counts ~ treatment) %>%
  adjust_pvalue(method = "hochberg") %>%
  mutate(y.position = rep(c(log10(100000), log10(300000), log10(1000000)), 6))
stat.test
p <- ggboxplot(sig, x = "treatment", y = "counts", facet.by = "sample_number") +
  scale_y_continuous(trans = "log10")

p + 
  stat_pvalue_manual(stat.test, hide.ns = T) +
  theme_pubr() +
  labs(x = "Treatment", y = "Log 10 gene 16s copies",
       caption = get_pwc_label(stat.test))
ggsave(filename = "../Figures/WorleWater16SCountsBoxPlot.png", plot = last_plot(), device = "png", units = "in", width = 6.5, height = 7.5, dpi = 300)
  
```
```{r}
sig <- norm %>%
  filter(Assay == "tetL") %>%
  droplevels()
sig

stat.test <- sig %>%
  group_by(plot) %>%
  dunn_test(counts ~ treatment) %>%
  adjust_pvalue(method = "hochberg") %>%
  mutate(y.position = rep(c(log10(100000), log10(300000), log10(1000000)), 6))
stat.test
p <- ggboxplot(sig, x = "treatment", y = "norm", facet.by = "sample_number") 

p + 
  stat_pvalue_manual(stat.test, hide.ns = T) +
  theme_pubr() +
  labs(x = "Treatment", y = "16S normalized *tetL*",
       caption = get_pwc_label(stat.test))
ggsave(filename = "../Figures/WorleWatertetLCountsBoxPlot.png", plot = last_plot(), device = "png", units = "in", width = 6.5, height = 7.5, dpi = 300)
  
```


```{r}
df <- SixS %>%
  filter(!rep %in% c(4,5,6)) %>%
  drop_na() %>%
  droplevels() 

pd <- df %>%
  group_by(sample_number, treatment) %>%
  dplyr::summarise(
    n = n(),
    mean = mean(counts),
    sd = sd(counts)
    ) %>%
  mutate(se = sd/sqrt(n))  %>%
  mutate(ic = se * qt((1-0.05)/2 + .5, n-1))

siglabel <- df %>%
  group_by(sample_number) %>%
  dunn_test(counts ~ treatment, p.adjust.method = "hochberg") %>%
  filter(p.adj < 0.05) %>%
  rstatix::add_significance("p") %>%
  rstatix::add_xy_position() 

ggplot(pd, aes(x = treatment, y = mean)) + geom_bar(stat = "identity") +
  geom_errorbar( aes(x = treatment, ymin = mean - ic, ymax = mean + ic), width = 0.2, colour = "black", size= 0.5) +
  ggpubr::stat_pvalue_manual(siglabel, label = "p.signif") +
  facet_grid(. ~ sample_number) 
```

```{r}
library(agricolae)

countsig <- function(data, sn){
  df <- data %>%
    filter(sample_number == sn)
  aov <- aov(counts ~ treatment, data = df)
  HSD <- HSD.test(aov, "treatment", group = T) 
  groups <- data.frame(HSD$groups) %>%
    rownames_to_column("Treatment")
  groups$sn <- sn
  groups$Assay <- unique(df$Assay)
  return(groups)
}

mapover <- sort(unique(SixS$sample_number))

sixxxS <- mapover %>%
  map( ~ countsig(sig, sn = .x)) %>%
  reduce(full_join) %>%
  unite(countsgroups, c(counts, groups), sep = " ") %>%
  pivot_wider(names_from = sn, values_from = c(countsgroups))
sixxxS
write_csv(sixxxS, file = "plots/tablesixssig.csv")

# Drop plot 4
signo4 <- sig %>%
  filter(!plot %in% c("4"))
signo4data <- mapover %>%
  map( ~ countsig(signo4, sn = .x)) %>%
  reduce(full_join) %>%
  unite(countsgroups, c(counts, groups), sep = " ") %>%
  pivot_wider(names_from = sn, values_from = c(countsgroups))
signo4data
write_csv(signo4data, file = "plots/tablesixssigno4.csv")
```

```{r}


test <- split(norm, norm$Assay)

mapover <- sort(unique(norm$sample_number))

ss <- mapover %>%
  map( ~ countsig(data = test$`16S_Eub_338_518`, sn = .x)) %>%
  reduce(full_join) %>%
  unite(countsgroups, c(counts, groups), sep = " ") %>%
  pivot_wider(names_from = sn, values_from = c(countsgroups))
ss

tetL <- mapover %>%
  map( ~ countsig(data = test$tetL, sn = .x)) %>%
  reduce(full_join) %>%
  unite(countsgroups, c(counts, groups), sep = " ") %>%
  pivot_wider(names_from = sn, values_from = c(countsgroups))
tetL

tetM <- mapover %>%
  map( ~ countsig(data = test$tetM, sn = .x)) %>%
  reduce(full_join) %>%
  unite(countsgroups, c(counts, groups), sep = " ") %>%
  pivot_wider(names_from = sn, values_from = c(countsgroups))
combineddata <- rbind(ss, tetL, tetM)

combineddata
```

```{r}
summary(aov(counts ~ treatment + sample_number + Assay, norm))
```

```{r}
# library(nlme)
# 
# foo <- norm %>%
#   split(.$Assay) %>%
#   map( ~ aov(counts ~ treatment * sample_number, data = .)) %>%
#   map(summary)
# foo
# mtcars$
# foo <- mtcars %>%
#   split(.$cyl) %>%
#   map( ~ aov(qsec))
```

# 16S amplicon data
```{r}
worle <- readRDS("data/Worle_curated.RDS")
```

```{r}
taxa_names(worle) <- paste0("ASV", seq(ntaxa(worle)))
worle1 <- subset_samples(worle, matrix %in% c("manure", "soil")) %>%
  filter_taxa(function(x) sum(x) > 0, T)

max(sample_sums(worle1))
min(sample_sums(worle1))
nsamples(worle1)
ntaxa(worle1)

tdt <- sample_sums(worle1) %>%
  enframe(name = "ID", value = "Sample_sum")

tdt <- as_tibble(sample_data(worle1)) %>%
  cbind(., sample_sums(worle1)) %>%
  dplyr::group_by(matrix) %>%
  dplyr::summarize(Mean_sample_sums = mean(`sample_sums(worle1)`, na.rm = TRUE), n_samples = n()) %>%
  write_csv("data/SSUMSWORLE.csv")

worle.water <- subset_samples(worle, matrix == "water" & unique_id != "Comp-from-P8-7-10-26-17") %>%
  filter_taxa(function(x) sum(x) > 0, T) 

worle_manure <- subset_samples(worle, matrix == c("manure")) %>%
  filter_taxa(function(x) sum(x) > 0, T)

worle_crop <- subset_samples(worle, matrix == c("soil") & soil_type == c("crop") & treatment == c("no_manure_strip") | sample_day == c("Baseline") & soil_type == c("crop")) %>%
  filter_taxa(function(x) sum(x) > 0, T)

worle_strips <- subset_samples(worle, matrix == c("soil") & soil_type == c("strip") & treatment == c("no_manure_strip") | sample_day == c("Baseline") & soil_type == c("strip")) %>%
  filter_taxa(function(x) sum(x) > 0, T)

worle.soil.phy <- subset_samples(worle, matrix == "soil" & treatment %in% c("manured_control", "manured_strip")) %>%
  filter_taxa(function(x) sum(x) > 0, T) 

ntaxa(worle_manure)

rm(worle)

plot <- phylogeny_profile(worle_manure, classification = "Phylum", merge = TRUE, relative_abundance = TRUE) +
  scale_fill_viridis_d(option = "plasma")

plot +
  theme_classic() +
  theme(
    panel.background = element_rect(color = 'black', size = 1.4),
    strip.text.x = element_text(size = 10, face = 'bold'),
    strip.background = element_rect(colour = 'black', size = 1.4),
    axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
    scale_fill_viridis_d(option = "plasma") +
    labs(x = "Poultry manure", y = "Relative abundance", fill = "Phylum") 

ggsave("plots/poultrymanurephylaprofiel.png", plot = last_plot(), device = "png", units = "in", width = 6.5, height = 7.5, dpi = 300)
  
library(tidyverse)
df <- tibble(plot$data)

df %>%
  dplyr::group_by(Phylum) %>%
  dplyr::summarise(mean = mean(Abundance), n = n()) %>%
  dplyr::arrange(-mean) 
```

```{r}
worle_manure_asvs <- taxa_names(worle_manure)
worle_crop_soil_asvs <- taxa_names(worle_crop)
worle_strip_soil_asvs <- taxa_names(worle_strips)

worle_vvv_diag <- venn(list("Manure_ASVs" = worle_manure_asvs, "Crop_ASVs" = worle_crop_soil_asvs, "Strip_ASVs" = worle_strip_soil_asvs))
venn(list("Manure_ASVs" = worle_manure_asvs, "Crop_ASVs" = worle_crop_soil_asvs, "Strip_ASVs" = worle_strip_soil_asvs))
ggsave("plots/AsvVenn", plot = last_plot(), device = "png", units = "in", width = 6.25, height = 6.25, dpi = 300)

worle_vvv_diag

worle_manure_persitors <- attr(worle_vvv_diag, "intersections")$Manure_ASVs
worle_crop_persistors <- attr(worle_vvv_diag, "intersections")$Crop_ASVs
worle_strip_persistors <- attr(worle_vvv_diag, 'intersection')$Strip_ASVs
worle_cropstrip_persistors <- attr(worle_vvv_diag, 'intersections')$`Crop_ASVs:Strip_ASVs`
```

```{r}
worle_vvv_diag
```

```{r}

tax_association <- tax_table(worle.water) %>%
  data.frame() %>%
  rownames_to_column("ASV") %>%
  mutate(ASV_Association = ifelse(ASV %in% worle_manure_persitors, "Manure",
                           ifelse(ASV %in% worle_crop_persistors, "Crop", 
                           ifelse(ASV %in% worle_strip_persistors, "Strip","Not_unique")))) %>%
  column_to_rownames("ASV") %>%
  as.matrix()


tax_table(worle.water) <- tax_association

####
# Testing relative abundance plot with full water dataset
plot <- phylogeny_profile(worle.water, classification = 'ASV_Association', treatment = c("treatment"), merge = TRUE, relative_abundance = TRUE) + 
  facet_nested(. ~ treatment + plot, scales = "free", space = "free") +
  theme(legend.position = "top",
             axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))

data <- plot$data %>%
  separate(col = unique_id, into = c("p", "time"), sep = "-")

plot

levels(data$treatment) <- c("Crop + Manure", "Crop + Strip + Manure", "Crop + Strip")

data$time <- as.factor(data$time)

levels(data$time) <- c("2.5", "7.5", "12.5", "17.5", "22.5", "27.5")
data$treatment_f <- factor(data$treatment, levels = c("Crop + Strip", "Crop + Strip + Manure", "Crop + Manure"))

ggplot(data = data, aes(x = time, y = Abundance)) +
  geom_bar(stat = "identity", aes(fill = ASV_Association)) + 
  facet_nested(. ~ treatment_f + plot, scales = "free", space = "free") +
  theme_classic() +
  theme(
    legend.position = "top", 
    panel.background = element_rect(color = 'black', size = 1.4),
    strip.text.x = element_text(size = 10, face = 'bold'),
    strip.background = element_rect(colour = 'black', size = 1.4),
    axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
    scale_fill_viridis_d(option = "plasma") +
    labs(x = "Sample time (min) after runoff", y = "Relative abundance", fill = "ASV \nAssociation") 

ggsave(filename = "plots/manuretaxainwater.png", plot = last_plot(), device = "png", units = "in", width = 6.5, height = 4.5, dpi = 300)


data <- plot$data %>%
  group_by(plot, treatment, ASV_Association) %>%
  summarise_at(vars(-OTU, -Sample, -unique_id, -experiment, -matrix, -sample_day, -depth, -in_plot_location, -block, -strip, -manure_treatment, -soil_type), funs(mean(., na.rm=TRUE)))
data
write_csv(x = data, file = "data/manuretaxainwater.csv")

plot$data %>%
  filter(treatment == c("no_manure_strip") & OTU == c("Manure"))
```

We have abundances of less than 1% of manure taxa in the crop + strip treatment. 
Let's take a look at the taxa table for the manure ASVs in the water.

```{r}
waterC_M <- subset_samples(worle.water, treatment == c("no_manure_strip")) %>%
  subset_taxa(ASV_Association == "Manure")

ntaxa(waterC_M)
view(tax_table(waterC_M))
```

It is possible that we did not completely cover the taxa present in soils, of both crop and strip. This could lead to 
taxa present in manure being labeled as manure associated despite presence in soil. The same is true for why we detected strip taxa in the control (no strip) water samples. 

```{r}
#### Manure ASVs in soil
tax_association <- tax_table(worle.soil.phy) %>%
  data.frame() %>%
  rownames_to_column("ASV") %>%
  mutate(ASV_Association = ifelse(ASV %in% worle_manure_persitors, "Manure_associated",
                           ifelse(ASV %in% worle_crop_persistors, "Crop_associated", 
                           ifelse(ASV %in% worle_strip_persistors, "Strip_associated","No_unique_association")))) %>%
  column_to_rownames("ASV") %>%
  as.matrix()

tax_table(worle.soil.phy) <- tax_association

#plot_bar(worle.soil.phy, fill = 'ASV_Association') # really slow
####
# Testing relative abundance plot with full soil dataset
plot <- phylogeny_profile(worle.soil.phy, 
                          classification = 'ASV_Association', 
                          treatment = c("treatment"), 
                          merge = TRUE, 
                          relative_abundance = TRUE) +
  theme_classic() +
  theme(
    legend.position = "top", 
    panel.background = element_rect(color = 'black', size = 1.4),
    strip.text.x = element_text(size = 10, face = 'bold'),
    strip.background = element_rect(colour = 'black', size = 1.4),
    axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
    scale_fill_viridis_d(option = "plasma") +
    labs(x = "Sample day", y = "Relative abundance", fill = "ASV \nAssociation")

plot
df <- tibble(plot$data)

df <- df %>%
  dplyr::group_by(treatment, plot, sample_day, soil_type, ASV_Association) %>%
  dplyr::summarise(mean = mean(Abundance), n = n()) %>%
  dplyr::arrange(-mean) 


write_csv(x = df, file = "data/manuretaxainsoil.csv")

ggplot(data = df, aes(x = sample_day, y = mean)) +
  geom_bar(stat = "identity", aes(fill = ASV_Association)) + 
  facet_nested(soil_type ~ treatment + plot, scales = "free", space = "free") +
  theme_classic() +
  theme(
    legend.position = "top", 
    panel.background = element_rect(color = 'black', size = 1.4),
    strip.text.x = element_text(size = 10, face = 'bold'),
    strip.background = element_rect(colour = 'black', size = 1.4),
    axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
    scale_fill_viridis_d(option = "plasma") +
    labs(x = "Sample day", y = "Relative abundance", fill = "ASV \nAssociation") 
```

Let's check the flow of water for each plot. For each of the water samples, we weighed the mass of the bottle of water (500 mL) and recorded how long it takes to get to that mass, we can then divide mass by time to get grams/second of water flow for each sample over the sample period.

```{r}
library(readxl)
WOR_Water_flow <- read_excel("data/WOR_Water_flow.xlsx")

#levels(WOR_Water_flow$treatment) <- c("Crop + Manure", "Crop + Strip + Manure", "Crop + Strip")

WOR_Water_flow$sample_number <- as.factor(WOR_Water_flow$sample_number)

levels(WOR_Water_flow$sample_number) <- c("2.5", "7.5", "12.5", "17.5", "22.5", "27.5")

WOR_Water_flow$treatment <- as.factor(WOR_Water_flow$treatment)

#levels(WOR_Water_flow$treatment) <- c("Crop + Manure", "Crop + Strip", "Crop + Manure + Strip")

ggplot(WOR_Water_flow, aes(x = as.factor(sample_number), y = `flow_g/s`, group = as.factor(plot))) +
  geom_line(position = position_dodge(width = .3)) +
  geom_point(aes(color = as.factor(treatment)), position = position_dodge(width = .3), size = 5) +
  geom_text(aes(label = plot), position = position_dodge(width = .3), show.legend = F) +
  theme_classic() +
  theme(
    legend.position = "top", 
    panel.background = element_rect(color = 'black', size = 1.4),
    strip.text.x = element_text(size = 10, face = 'bold'),
    strip.background = element_rect(colour = 'black', size = 1.4),
    axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
    scale_color_viridis_d() +
    labs(x = "Water sample", y = "Flow grams/second", color = "Treatment \n(points labeled with plot)") 
  

ggsave("plots/WORWaterFlow.png", plot = last_plot(), device = "png", units = "in", width = 6.5, height = 5, dpi = 300)
```
```{r}

```

