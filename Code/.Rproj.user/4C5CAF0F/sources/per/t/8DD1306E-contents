---
title: "WorARGs"
author: "Jared Flater"
date: "2/16/2021"
output: html_document
---

To run this markdown, be sure that the "biomark-bioinformatics" folder is located in your Documents directory, or change the directory to the correct folder in the first chunk.

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "~/Documents/biomark-bioinformatics/")
```

```{r libraries, include=FALSE}
library(tidyverse)
library(ggh4x)
library(viridis)
library(venn)
library(rstatix)
library(ggpubr)
library(readxl)
library(kableExtra)
```

```{r setwd and read data, include=FALSE}
setwd("~/Documents/biomark-bioinformatics/")
df <- readRDS("data/metawithbiomark.RDS") 
# Make Value column numeric
df$Value <- as.numeric(df$Value)
```

```{r subset biomark}
soil <- df %>%
  filter(sample_type %in% "soil")
water <- df %>%
  filter(sample_type %in% "water") 
manure <- df %>%
  filter(sample_type %in% "manure")
control <- df %>%
  filter(sample_type %in% "control")
standard <- df %>%
  filter(sample_type %in% "standard")
```

# ARGs in Manure

```{r plot manure ct}
summary <- manure %>%
  filter(Call == "Pass") %>%  
  group_by(Assay) %>%
  summarise( 
    n=n(),
    mean=mean(Value),
    sd=sd(Value)
  ) %>%
  mutate(se = sd/sqrt(n))  %>%
  mutate(ic = se * qt((1-0.05)/2 + .5, n-1))

ggplot(summary) +
  geom_bar(aes(x = reorder(Assay, mean), y = mean), stat = "identity", 
           position = position_dodge(width = 0.75)) +
  geom_errorbar( aes(x = reorder(Assay, mean), ymin = mean - ic, ymax = mean + ic), width = 0.2, colour = "black", size= 0.5) +
  labs(y = "Cycle time for assays in manure", x = "Assay") +
  scale_fill_manual(values = colors) +
  theme(legend.position = "none", 
        axis.text.x = element_text(angle = 45, hjust = 1))
  
#ggsave(filename = "plots/poultrymanureCT.png", plot = last_plot(), device = "png", units = "in", width = 6.5, height = 4.5, dpi = 300)
```

# Table of manure probes and ct

```{r}
df <- tibble(ARG = summary$Assay, Abundance = summary$mean, sd = summary$sd) %>%
  mutate(across(.cols = c(Abundance, sd), round, 3)) %>%
  unite(col = "Manure Ct", c("Abundance", "sd"), sep = " +/- ") 
df
```

```{r}
Standards <- read_excel("~/Documents/biomark-bioinformatics/data/PC8_Standards.xlsx", sheet = 2) %>%
  select(Probe, Sequence, Length) %>%
  filter(row_number() <= n()-5)
Primers <- read_excel("~/Documents/biomark-bioinformatics/data/bob_primer_plate.xlsx", col_names = T) %>%
  select(`Sequence Name`, Sequence)
OtherPrimers <- read_excel("~/Documents/biomark-bioinformatics/data/Primers for Jared.xlsx")
```

```{r}
Primers <- Primers %>%
  separate(`Sequence Name`, c("Probe", "Direction"), sep = "_(?=[^_]+$)") %>%
  mutate(Direction = str_replace(Direction, "F", "Forward"),
         Direction = str_replace(Direction, "R", "Reverse"))
```

```{r}
Standards <- Standards %>%
  separate(Probe, c("Probe", "Direction"), sep = "_(?=[^_]+$)") %>%
  mutate(Probe = str_replace(Probe, "ermC", "erm(C)"))
```

```{r}
x <- OtherPrimers %>%
  separate(Probe, c("Probe", "extra"), sep = "_(?=[^_]+$)") %>%
  filter(Probe == "16S_Eub", Direction == "Forward") %>%
  separate(Probe, into = c("ARG", "x")) %>%
  select(ARG, `F Probe` = Sequence) 
x 
d <- df %>%
  separate(ARG, c("ARG", "x"), sep = "_")
d
d %>%
  select(!x) %>%
  left_join(x) %>%
  left_join(filter(Primers, Direction == "Forward"), by = c("ARG" = "Probe")) %>%
  select(!Direction) %>%
  unite(col = "F Probe", c("F Probe", "Sequence"), na.rm = T) %>%
  write.csv(file = "data/ManureArgCtTable.csv")
```


```{r}
std <- standard %>%
  filter(Sample_Name %in% df$ARG, Call == "Pass") %>%
  filter(Assay == Sample_Name) %>%
  select(Assay, rConc, Value) %>%
  left_join(Standards, by = c("Assay" = "Probe")) %>%
  mutate(counts = as.numeric(rConc) * (1/(10^9)) * (1/660) * ((6.023*10^23)/1) * (1/as.numeric(Length)) * (.0067))

Assays <- length(unique(std$Assay))
```

# Ask Laura

about what standards were run, it appears we only have data for `r Assays` assays

# Log transforming, discuss at meeting

```{r}
get_counts <- function(stddf, ctdf, gene){
  std <- stddf %>%
    filter(Assay == gene)
  ctd <- ctdf %>%
    filter(Assay == gene)
  inverse.lm <- lm(data = std, formula = log10(counts+1) ~ as.numeric(Value)) # Note log10 transformation
  
  val2 <- ctd$Value
  
  ctd$counts <- 10 ^ predict(inverse.lm ,data.frame(Value = val2), interval = "predict")[,1] 
  return(ctd)
}
```

```{r message=FALSE, warning=FALSE}
manure_counts <- std$Assay %>%
  map( ~ get_counts(std, manure, gene = .x)) %>%
  reduce(full_join)
```

```{r}
summary <- manure_counts %>%
  filter(Call == "Pass") %>%  
  group_by(Assay) %>%
  summarise( 
    n=n(),
    mean=mean(counts),
    sd=sd(counts)
  ) %>%
  mutate(se = sd/sqrt(n))  %>%
  mutate(ic = se * qt((1-0.05)/2 + .5, n-1))
summary

ggplot(summary) +
  geom_bar(aes(x = reorder(Assay, mean), y = mean), stat = "identity", 
           position = position_dodge(width = 0.75)) +
  geom_errorbar( aes(x = reorder(Assay, mean), ymin = mean - ic, ymax = mean + ic), width = 0.2, colour = "black", size= 0.5) +
  labs(y = "Counts of copies for assays in manure", x = "Assay") +
  scale_fill_manual(values = colors) +
  theme(legend.position = "none", 
        axis.text.x = element_text(angle = 45, hjust = 1))
```

Manure assays and predicted counts based on generation of standard curves at multiple concentrations. We only have standards for some genes. 

# ARGs in Soil

```{r soil heatmap}
SoilCT <- soil %>%
  select(Sample_Name, plot, sample_day, treatment, Assay, Value, Call, soil_type) 

SoilCT$Value[SoilCT$Value>30]<- NA # Change high CT

SoilCT$Treatment_f = factor(SoilCT$treatment, 
                             levels = c('WCS', 'WCSM', 'WCM')) # Change order of factors, WCS is kinda like control
unique(SoilCT$Assay)
SoilCT <- SoilCT %>% # Add classes to ARGs
  mutate(gene_class = case_when(Assay %in% unique(SoilCT$Assay[grepl("^[aa]", SoilCT$Assay)]) ~ "AMG",
                                Assay %in% unique(SoilCT$Assay[grepl("^[erm]", SoilCT$Assay)]) ~ "MLSB",
                                Assay %in% unique(SoilCT$Assay[grepl("^[sul]", SoilCT$Assay)]) ~ "Sulfa",
                                Assay %in% unique(SoilCT$Assay[grepl("tet", SoilCT$Assay)]) ~ "Tet",
                                Assay %in% c("intl1", "intl2", "intl3", "IS1247", "IS6100", "tnpA2",
                                             "tnpA5", "tnpA6", "tnpA3", "intI1F165_clinical", "tnpA1", "int1-a-marko", "tnpA7") ~ "MGE", 
                                Assay %in% c("cadC", "cmr") ~ "HM",
                                Assay == c("16S_Eub_338_518") ~ "16S"))

SoilCT$gene_class_f = factor(SoilCT$gene_class, # Order the classes
                              levels = c('AMG', 'MLSB', 'Sulfa', "Tet", "MGE", "HM", "16S"))

test <- SoilCT %>% # Order ARGs based on class
  arrange(gene_class) 

levels <- dput(levels(factor(test$Assay))) # dput ftw!!!

heatmap <- ggplot(SoilCT, aes(as.factor(sample_day), ordered(Assay, levels = levels))) +
  geom_tile(aes(fill = Value), colour = "white", size = 0.1) +
  scale_fill_viridis(name = "Gene CT", option = "plasma")  +
  labs(x = "Sample Day", y = "Gene") +
  facet_nested(gene_class_f ~ Treatment_f + plot, scales = "free", space = "free") + theme_classic() +
  theme(
    legend.background = element_rect(
      fill = (alpha = 0),
      color = 'black',
      size = 0.1),
    panel.background = element_rect(color = 'black', size = 1.4),
    strip.text.x = element_text(size = 10, face = 'bold'),
    strip.background = element_rect(colour = 'black', size = 1.4),
    axis.text.x = element_text(angle = 90)
  ) 

heatmap

ggsave(filename = "plots/soilCTheatmap.png", plot = last_plot(), device = "png", units = "in", width = 6.5, height = 9, dpi = 300)
```
```{r}
length(unique(SoilCT$Assay))

std <- standard %>%
  filter(Sample_Name %in% df$ARG, Call == "Pass") %>%
  filter(Assay == Sample_Name) %>%
  select(Assay, rConc, Value) %>%
  left_join(Standards, by = c("Assay" = "Probe")) %>%
  mutate(counts = as.numeric(rConc) * (1/(10^9)) * (1/660) * ((6.023*10^23)/1) * (1/as.numeric(Length)) * (.0067))
std
Assays <- length(unique(std$Assay))
Assays
```
# Soil ARG counts


```{r message=FALSE, warning=FALSE}
soil_counts <- std$Assay %>%
  map( ~ get_counts(std, soil, gene = .x)) %>%
  reduce(full_join)
```

```{r}
summary <- soil_counts %>%
  filter(Call == "Pass", !Assay %in% c("16S_Eub_338_518", "intI1F165_clinical")) %>%  
  group_by(Assay, treatment, soil_type) %>%
  summarise( 
    n=n(),
    mean=mean(counts),
    sd=sd(counts)
  ) %>%
  mutate(se = sd/sqrt(n))  %>%
  mutate(ic = se * qt((1-0.05)/2 + .5, n-1))
summary

ggplot(summary) +
  geom_bar(aes(x = reorder(Assay, mean), y = mean), stat = "identity", 
           position = position_dodge(width = 0.75)) +
  geom_errorbar( aes(x = reorder(Assay, mean), ymin = mean - ic, ymax = mean + ic), width = 0.2, colour = "black", size= 0.5) +
  labs(y = "Counts of copies for assays in soil", x = "Assay") +
  scale_fill_manual(values = colors) +
  theme(legend.position = "none", 
        axis.text.x = element_text(angle = 45, hjust = 1)) +
  facet_grid(treatment ~ soil_type)
```

```{r}
heatmap <- soil_counts %>%
  filter(!Assay %in% c("16S_Eub_338_518", "intI1F165_clinical")) %>%
  ggplot(aes(as.factor(sample_day), ordered(Assay, levels = levels))) +
  geom_tile(aes(fill = counts), colour = "white", size = 0.1) +
  scale_fill_viridis(name = "Gene counts", option = "plasma")  +
  labs(x = "Sample Day", y = "Gene") +
  facet_nested(. ~ treatment + plot, scales = "free", space = "free") + theme_classic() +
  theme(
    legend.background = element_rect(
      fill = (alpha = 0),
      color = 'black',
      size = 0.1),
    panel.background = element_rect(color = 'black', size = 1.4),
    strip.text.x = element_text(size = 10, face = 'bold'),
    strip.background = element_rect(colour = 'black', size = 1.4),
    axis.text.x = element_text(angle = 90)
  ) 

heatmap
```
# ARG water counts

```{r}
water_counts <- std$Assay %>%
  map( ~ get_counts(std, water, gene = .x)) %>%
  reduce(full_join)

write_excel_csv(water_counts, file = "~/Documents/biomark-bioinformatics/data/WORWATERARGCOUNTS.csv")

summary <- water_counts %>%
  filter(Call == "Pass", !Assay %in% c("16S_Eub_338_518", "intI1F165_clinical")) %>%  
  group_by(Assay, treatment, sample_number) %>%
  summarise( 
    n=n(),
    mean=mean(counts),
    sd=sd(counts)
  ) %>%
  mutate(se = sd/sqrt(n))  %>%
  mutate(ic = se * qt((1-0.05)/2 + .5, n-1))
summary

ggplot(summary) +
  geom_bar(aes(x = reorder(Assay, mean), y = mean), stat = "identity", 
           position = position_dodge(width = 0.75)) +
  geom_errorbar( aes(x = reorder(Assay, mean), ymin = mean - ic, ymax = mean + ic), width = 0.2, colour = "black", size= 0.5) +
  labs(y = "Counts of copies for assays in water", x = "Assay") +
  scale_fill_manual(values = colors) +
  theme(legend.position = "none", 
        axis.text.x = element_text(angle = 45, hjust = 1)) +
  facet_grid(treatment ~ sample_number)
```

