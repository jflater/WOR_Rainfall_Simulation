---
title: "ARGs"
author: "Jared Flater"
date: "2/15/2021"
---

```{r libraries, include=FALSE}
library(tidyverse)
library(ggh4x)
library(viridis)
library(phyloseq)
library(phylosmith)
library(venn)
library(ggvenn)
library(rstatix)
library(ggpubr)
library(kableExtra)
```
ARG Figures

```{r}
library(tidyverse)
library(viridisLite)
library(ggh4x)
library(ggpubr)
library(rstatix)
library(ggtext)
```

```{r}
df <- readRDS("Data/metawithbiomark.RDS") 
```

```{r}
standard <- df %>%
  filter(sample_type %in% "standard")
```

```{r}
PC_Standards_no_NA <- readRDS("Data/ampliconlengths.RDS")
PC_Standards_no_NA
```

Calculating limit of detection for each gene

```{r}
filtered_standard <- standard %>% 
  filter(Sample_Name == Assay)
lod_max_by_gene <- filtered_standard %>% 
  group_by(rConc, Sample_Name) %>%
  filter(any(Call == "Pass")) %>% 
  mutate(Value = as.numeric(Value)) %>% 
  filter(!Call == "Flag") %>%
  summarise(max_lod = max(Value)) %>% 
  group_by(Sample_Name) %>% 
  slice_max(max_lod) 
lod_max_by_gene %>% 
  ggplot(aes(Sample_Name, max_lod)) +
  geom_col(aes(fill = rConc)) +
  theme_light() +
  theme(
    axis.text.x = element_text(angle = 90, hjust = 1)
  ) +
  scale_y_continuous(expand = expansion(add = c(0, 0), mult = c(0, 0.1))) 
counts <- filtered_standard %>%
  group_by(rConc, Sample_Name) %>% 
  filter(any(Call == "Pass")) %>% 
  select(Sample_Name, Assay, rConc, Value, Call)  %>%
  ungroup() %>%  
  filter(!Call == "Flag") %>%
    left_join(PC_Standards_no_NA) %>%
    select(Assay, rConc, Value, amp_len) %>%
    mutate(counts = as.numeric(rConc) * (1/(10^9)) * (1/660) * ((6.023*10^23)/1) * (1/as.numeric(amp_len)) * (.0067)) %>%
    mutate(Value = as.numeric(Value))
```

```{r}
lod_max_by_gene
```

```{r, fig.width=12, fig.height=12}
lm_eqn = function(df){
    m = lm(data = df, formula = as.numeric(Value) ~ log10(counts + 1))
    b = coef(m)[2]  
    data.frame(
      eff = round(100*((10^(-1/b))-1), digits = 2),
      r2 = format(summary(m)$r.squared, digits = 3),
      LOD = round(max(df$Value), digits = 2),
      Intercept = round(coef(m)[1], digits = 2),
      Slope = round(coef(m)[2], digits = 2)
    )
}
st_splits <-  counts %>% 
  group_by(Assay) %>% 
  group_split() 
eqs <- st_splits %>% 
  lapply(., lm_eqn) %>% 
  bind_rows()
labels <- lapply(st_splits, slice_head, n = 1) %>% 
  bind_rows() %>% 
  select(Assay) %>% 
  bind_cols(eqs) %>% 
  mutate(eq_label = paste0("LOD = ", LOD, "<br>r^2 = ", r2, "<br>Efficiency = ", eff, "<br>Slope = ", Slope, "<br>Intercept = ", Intercept))
SCPlots <- counts %>%
  ggplot(aes(as.numeric(log10(counts + 1)), as.numeric(Value))) +
  geom_point() +
  facet_wrap( ~ Assay, scales = "free") + 
  theme(
    panel.border = element_rect(color = "black", size = 1, fill = NA),
    panel.grid.minor.x = element_blank(),
    panel.grid.minor.y = element_blank(),
    panel.spacing = unit(0.5, "lines"),
    strip.background = element_rect(color = "black", size = 1, fill = NA),
  ) + 
  labs(
    x = "Log10 (gene copies per reaction)",
    y = "Ct"
  ) + 
  scale_x_continuous(limits = c(0, 7), breaks = seq(0, 7, 1), expand = c(0, 0)) + 
  scale_y_continuous(limits = c(0, 25)) +
  geom_smooth(aes(group=1), method="lm", se=FALSE) + 
  ggtext::geom_richtext(data = labels, aes(x = 2, y = 5, label = eq_label),
                        size = 4, fontface = "bold", inherit.aes = FALSE) +
  theme(
    text = element_text(size = 12, family = "Times"),
    panel.background = element_rect(color = 'black', size = 1.4),
    strip.text.x = element_text(size = 10, face = 'bold'),
    strip.background = element_rect(colour = 'black', size = 1.4),
    axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
    legend.position = "top",
    legend.key.width = unit(.75, "in")
  ) 
SCPlots
# Save a table of the information from each curve
LODtable <- labels %>%
  select(!eq_label)
LODtable
write_csv(LODtable, file = "Data/standardcurves.csv")
```

Calculating counts in an environmental sample

```{r}
counts
```

Environment Ct values

```{r}
water <- df %>%
  filter(sample_type %in% "water", !Sample_Name == "Supply_Water")
water
soil <- df %>%
  filter(sample_type %in% "soil")
soil
unique(water$Sample_Name)
```

```{r}
get_counts <- function(stddf, ctdf, gene){
  #stddf <- counts # use to test
  #ctdf <- water # use to test
  #gene <- "tetM" # use to test
  std <- stddf %>%
    filter(Assay == gene)
  ctd <- ctdf %>%
    filter(Assay == gene)
  inverse.lm <- lm(data = std, formula = log10(counts+1) ~ as.numeric(Value)) # Note log10 transformation
  
  val2 <- ctd$Value
  
  ctd$counts <- 10 ^ predict(inverse.lm ,data.frame(Value = val2), interval = "predict")[,1] 
  return(ctd)
}
```

```{r}
unique(counts$Assay)
unique(water$Assay)
```

By changing high Ct values to NA, we clean up the heatmap by converting these "non detects" to gray color tiles

```{r}
# Change high Ct values to NA
water$Value[water$Value > 30] <- NA
soil$Value[soil$Value > 30] <- NA
```

```{r, echo=F}
dput(unique(counts$Assay))
WaterCounts <- c("tetbP", "sul1 NEW", "IS6100", "erm(C)", "16S_Eub_338_518", 
"strB", "aadA9", "tetG_F", "sul2", "tetW", 
"tetT", "tetL", "tetM", "tetH", "tetX") %>%
  map( ~ get_counts(counts, water, gene = .x)) %>%
  reduce(full_join)
SoilCounts <- c("tetbP", "sul1 NEW", "IS6100", "erm(C)", "16S_Eub_338_518", 
"strB", "aadA9", "tetG_F", "sul2", "tetW", 
"tetT", "tetL", "tetM", "tetH", "tetX") %>%
  map( ~ get_counts(counts, soil, gene = .x)) %>%
  reduce(full_join)
```

```{r}
WaterCounts <- WaterCounts %>% # Add classes to ARGs
  mutate(gene_class = case_when(Assay %in% unique(WaterCounts$Assay[grepl("^[aa]", WaterCounts$Assay)]) ~ "AMG",
                                Assay %in% unique(WaterCounts$Assay[grepl("^[erm]", WaterCounts$Assay)]) ~ "MLSB",
                                Assay %in% unique(WaterCounts$Assay[grepl("^[sul]", WaterCounts$Assay)]) ~ "Sulfa",
                                Assay %in% unique(WaterCounts$Assay[grepl("tet", WaterCounts$Assay)]) ~ "Tet",
                                Assay %in% c("intl1", "intl2", "intl3", "IS1247", "IS6100", "tnpA2",
                                              "tnpA5", "tnpA6", "tnpA3", "intI1F165_clinical", "tnpA1", "int1-a-marko", "tnpA7") ~ "MGE", 
                                Assay %in% c("cadC", "cmr") ~ "HM",
                                Assay == c("16S_Eub_338_518") ~ "16S"))
WaterCounts$gene_class_f = factor(WaterCounts$gene_class, # Order the classes
                                levels = c('AMG', 'MLSB', 'Sulfa', "Tet", "MGE", "HM", "16S"))
```

```{r}
SoilCounts <- SoilCounts %>% # Add classes to ARGs
  mutate(gene_class = case_when(Assay %in% unique(SoilCounts$Assay[grepl("^[aa]", SoilCounts$Assay)]) ~ "AMG",
                                Assay %in% unique(SoilCounts$Assay[grepl("^[erm]", SoilCounts$Assay)]) ~ "MLSB",
                                Assay %in% unique(SoilCounts$Assay[grepl("^[sul]", SoilCounts$Assay)]) ~ "Sulfa",
                                Assay %in% unique(SoilCounts$Assay[grepl("tet", SoilCounts$Assay)]) ~ "Tet",
                                Assay %in% c("intl1", "intl2", "intl3", "IS1247", "IS6100", "tnpA2",
                                              "tnpA5", "tnpA6", "tnpA3", "intI1F165_clinical", "tnpA1", "int1-a-marko", "tnpA7") ~ "MGE", 
                                Assay %in% c("cadC", "cmr") ~ "HM",
                                Assay == c("16S_Eub_338_518") ~ "16S"))
SoilCounts$gene_class_f = factor(SoilCounts$gene_class, # Order the classes
                                levels = c('AMG', 'MLSB', 'Sulfa', "Tet", "MGE", "HM", "16S"))
```

```{r}
norm <- WaterCounts %>%
  unite(ID, c("plot", "sample_number", "Assay"), sep = ".", remove = F) %>%
  dplyr::group_by(plot, sample_number, Assay) %>%
  dplyr::mutate(rep = seq_along(ID)) %>%
  select(plot, sample_number, rep, treatment, Assay, gene_class, counts, Value) %>%
  ungroup()

saveRDS(norm, file = "Data/norm.RDS")
```
```{r}
soilnorm <- SoilCounts %>%
  unite(ID, c("plot", "sample_day", "sample_number", "soil_type", "Assay"), sep = ".", remove = F) %>%
  dplyr::group_by(plot, sample_day, sample_number, soil_type, Assay) %>%
  dplyr::mutate(rep = seq_along(ID)) %>%
  select(plot, sample_number, sample_day, soil_type, rep, treatment, Assay, gene_class, counts, Value) %>%
  ungroup()
```

```{r}
SixS <- norm %>%
  filter(Assay == "16S_Eub_338_518") %>%
  dplyr::rename(SixSCount = counts) %>%
  select(plot, sample_number, rep, SixSCount, treatment) 
SoilSixS <- soilnorm %>%
  filter(Assay == "16S_Eub_338_518") %>%
  dplyr::rename(SixSCount = counts) %>%
  select(plot, sample_number, sample_day, soil_type, rep, SixSCount, treatment)
dfdf <- norm %>%
  left_join(SixS, by = c("plot", "sample_number", "rep", "treatment")) %>%
  filter(!Assay == "16S_Eub_338_518")
soildfdf <- soilnorm %>%
  left_join(SoilSixS, by = c("plot", "sample_number", "sample_day", "soil_type", "rep", "treatment")) %>%
  filter(!Assay == "16S_Eub_338_518")
# Now got to divide each count of each gene by the 16s number
test <- WaterCounts %>% # Order ARGs based on class
  arrange(gene_class) 
levels <- dput(levels(factor(test$Assay))) # dput ftw!!!
dfdf$treatment = factor(dfdf$treatment, 
                             levels = c('WCS', 'WCSM', 'WCM'))
# Also need to set the order of the soil data
soildfdf$treatment = factor(soildfdf$treatment, 
                             levels = c('WCS', 'WCSM', 'WCM'))
dfdf$sample_number <- as.factor(dfdf$sample_number)
levels(dfdf$sample_number) <- list("2.5" = "1", "7.5" = "2", "12.5" = "3", "17.5" = "4", "22.5" = "5", "27.5" = "6")
```

```{r}
waterdata <- dfdf %>%
  mutate(norm = counts/SixSCount)
soildata <- soildfdf %>%
  mutate(norm = counts/SixSCount)
```

Unfiltered counts in water

```{r}
levels(waterdata$treatment) <- list("CS" = "WCS", "CSL" = "WCSM", "CL" = "WCM")
heatmap2 <- ggplot(waterdata, aes(as.factor(sample_number), ordered(Assay, levels = levels))) +
  geom_tile(aes(fill = norm), colour = "white", size = 0.1) +
  scale_fill_viridis_c(name = "ARG copies \nnormalized by 16S")  +
  labs(x = "Sample time (min) after runoff", y = "ARG") +
  facet_nested(gene_class ~ treatment + plot, scales = "free", space = "free") + theme_classic() +
  theme(
    text = element_text(size = 12, family = "Times"),
    panel.background = element_rect(color = 'black', size = 1.4),
    strip.text.x = element_text(size = 10, face = 'bold'),
    strip.background = element_rect(colour = 'black', size = 1.4),
    axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
    legend.position = "top",
    legend.key.width = unit(.75, "in")
  ) 
heatmap2
```

```{r}
ggplot(waterdata, aes(as.factor(sample_number), ordered(Assay, levels = levels))) +
  geom_tile(aes(fill = counts), colour = "white", size = 0.1) +
  scale_fill_viridis_c(name = "ARG copies")  +
  labs(x = "Sample time (min) after runoff", y = "ARG") +
  facet_nested(gene_class ~ treatment + plot, scales = "free", space = "free") + theme_classic() +
  theme(
    text = element_text(size = 12, family = "Times"),
    panel.background = element_rect(color = 'black', size = 1.4),
    strip.text.x = element_text(size = 10, face = 'bold'),
    strip.background = element_rect(colour = 'black', size = 1.4),
    axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
    legend.position = "top",
    legend.key.width = unit(.75, "in")
  ) 
```

Filtered counts in water

```{r}
waterwithlod <- waterdata %>%
  left_join(lod_max_by_gene, by = c("Assay" = "Sample_Name")) 
  
waterwithlod$norm[waterwithlod$Value >= waterwithlod$max_lod] <- NA
waterwithlod$counts[waterwithlod$Value >= waterwithlod$max_lod] <- NA
levels(waterwithlod$treatment) <- list("CS" = "WCS", "CSL" = "WCSM", "CL" = "WCM")
```

# Figure 4
```{r}
#waterwithlod <- waterwithlod %>% mutate(Assay = str_replace(Assay, "tetG_F", "tetG"))
#waterwithlod %>% 
#  mutate(Assay = str_replace(Assay, "tetG_F", "tetG")) %>%
#  count(Assay)
heatmap <- ggplot(waterwithlod, aes(as.factor(sample_number), ordered(Assay, levels = levels))) +
  geom_tile(aes(fill = norm), colour = "white", size = 0.1) +
  scale_fill_viridis_c(name = "ARG copies \nnormalized by 16S")  +
  labs(x = "Sample time (min) after runoff", y = "ARG") +
  facet_nested(gene_class ~ treatment + plot, scales = "free", space = "free") + theme_classic() +
  theme(
    text = element_text(size = 12, family = "Times"),
    panel.background = element_rect(color = 'black', size = 1.4),
    strip.text.x = element_text(size = 10, face = 'bold'),
    strip.background = element_rect(colour = 'black', size = 1.4),
    axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
    legend.position = "top",
    legend.key.width = unit(.75, "in")) 
heatmap
heatmap$data %>%
  count(Assay)
```

* Astrik on manure ARGs
```{r}
labels <- c(tetbP = "* tetbP ", 
            aphA3 = "* aphA3 ", 
            tetT = "* tetT ", 
            tetW = "* tetW ", 
            `erm(C)` = "* erm(C)", 
            tetX = "* tetX ", 
            tnpA1 = "* tnpA1 ",
            tetH = "* tetH ", 
            lnuA = "* lnuA ", 
            tnpA5 = "* tnpA5 ", 
            tetM = "* tetM ", 
            cmr = "* cmr ",
            tetG_F = "tetG ",
            `sul1 NEW` = "sul1")
labels
```
```{r}
heatmap +
  scale_y_discrete(
    name = NULL,
    labels = labels
  ) 
ggsave(filename = "Figures/Fig4.jpeg", plot = last_plot(), device = "jpeg", units = "in", width = 7, height = 7.5, dpi = 350)
```

```{r}
ggplot(waterwithlod, aes(as.factor(sample_number), ordered(Assay, levels = levels))) +
  geom_tile(aes(fill = counts), colour = "white", size = 0.1) +
  scale_fill_viridis_c(name = "ARG copies")  +
  labs(x = "Sample time (min) after runoff", y = "ARG") +
  facet_nested(gene_class ~ treatment + plot, scales = "free", space = "free") + theme_classic() +
  theme(
    text = element_text(size = 12, family = "Times"),
    panel.background = element_rect(color = 'black', size = 1.4),
    strip.text.x = element_text(size = 10, face = 'bold'),
    strip.background = element_rect(colour = 'black', size = 1.4),
    axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
    legend.position = "top",
    legend.key.width = unit(.75, "in"))
```

A few genes were detected in low enough quantities that they are no longer visible in the filtered data set. Overall, the results do not change much, but there are changes in pairwise significance for some genes that I need to evaluate further. 

# Supp Figure S3

```{r}
soilwithlod <- soildata %>%
  left_join(lod_max_by_gene, by = c("Assay" = "Sample_Name")) 
  
soilwithlod$norm[soilwithlod$Value >= soilwithlod$max_lod] <- NA
soilwithlod$counts[soilwithlod$Value >= soilwithlod$max_lod] <- NA
levels(soilwithlod$treatment) <- list("CS" = "WCS", "CSL" = "WCSM", "CL" = "WCM")
heatmap2 <- ggplot(soilwithlod, aes(as.factor(sample_day), ordered(Assay, levels = levels))) +
  geom_tile(aes(fill = norm), colour = "white", size = 0.1) +
  scale_fill_viridis_c(name = "ARG copies \nnormalized by 16S")  +
  labs(x = "Sample day", y = "ARG") +
  facet_nested(gene_class ~ treatment + plot, scales = "free", space = "free") + theme_classic() +
  theme(
    text = element_text(size = 12, family = "Times"),
    panel.background = element_rect(color = 'black', size = 1.4),
    strip.text.x = element_text(size = 10, face = 'bold'),
    strip.background = element_rect(colour = 'black', size = 1.4),
    axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
    legend.position = "top",
    legend.key.width = unit(.75, "in")
  ) 
heatmap2 +
  scale_y_discrete(
    name = NULL,
    labels = labels
  ) 
ggsave(filename = "Figures/SupFigS3.jpeg", plot = last_plot(), device = "jpeg", units = "in", width = 7, height = 7.5, dpi = 350)
```
