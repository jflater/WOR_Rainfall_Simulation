[
  {
    "objectID": "16S.html",
    "href": "16S.html",
    "title": "16S",
    "section": "",
    "text": "Introduction\nThis code was used to generate figures for a publication titled: Prairie Strips Impact on Transport of Antibiotic Resistance Indicators in Poultry Litter\nThe manuscript is available here:\nThe project was designed to evaluate if the conservation practice of planting strips of prairie grasses within agricultural fields might attenuate the transport of Litter associated genes and bacteria.\nPoultry Litter was applied to small plots appended with prairie strips and rainfall was simulated on the Litter applied ground. Runoff water samples were collected after passing through the prairie strip and soil samples were collected before and after the rainfall simulation. In both soil and water samples we looked for and tracked the presence and abundance of Litter associated bacteria and genes.\nFigure 1\nFigure was is a taxonomic profile of the bacteria present in the poultry Litter that was used as a fertilizer. Litter was applied to six of nine plots, two plots received Litter each day of a rainfall simulation. Rainfall simulations were performed on the nine plots over three days, one day each for a block of plots. Each block contained one plot from each treatment. The treatments were:\nCrop + Strip (CS)\nCrop + Strip + Litter (CSL)\nCrop + Litter (CL)\nThe Litter applied to each plot came from a single ~ 60 lbs batch of Litter. When Litter was applied to each plot, a sample of Litter was taken to be analyzed for bacteria and antibiotic resistance genes. To track Litter associated bacteria, we must first characterize the bacteria present. Here we have six Litter samples and a bar plot representing the relative abundance of bacterial phyla in each sample. This data was generated using NGS sequencing of the 16S gene and analyzed using DADA2 to generate a count of the different taxa present in the various samples from the rainfall simulation.\n16S Figures\n\n# Worle data\nworle <- readRDS(\"Data/Worle_curated.RDS\") \n\n# set taxa to ASV, otherwise uses the sequence as taxa name\ntaxa_names(worle) <- paste0(\"ASV\", seq(ntaxa(worle)))\n\n# rename NA taxa as \"Unclassified\"\nTax.Table <- data.frame(tax_table(worle)) %>%\n  replace(is.na(.), \"Unclassified\")\n\n# replace tax table \ntax_table(worle) <- as.matrix(Tax.Table)\n\nFirst, visualize differences in communities by plotting PCoA ordination of the Bray-Curtis dissimilarity\n\ncolnames(sample_data(worle))\n\n [1] \"unique_id\"        \"experiment\"       \"matrix\"           \"treatment\"       \n [5] \"plot\"             \"sample_day\"       \"depth\"            \"in_plot_location\"\n [9] \"block\"            \"strip\"            \"manure_treatment\" \"soil_type\"       \n\nsample_data(worle)$treatment[is.na(sample_data(worle)$treatment)] <- \"manure\"\n\npcoa <- pcoa_phyloseq(worle, c('matrix', 'treatment'), circle = T) +\n  scale_fill_viridis_d() +\n  theme_minimal()\n\nScale for 'fill' is already present. Adding another scale for 'fill', which\nwill replace the existing scale.\n\npcoa\n\n\n\nggsave(filename = \"Figures/PCoA.jpeg\", plot = pcoa, device = \"jpeg\", width = 7.0, height = 6.0, units = \"in\", dpi = 350)\n\n\nworle.manure <- subset_samples(worle, matrix == \"manure\") %>% # subset to manure\n  filter_taxa(function(x) sum(x) >= 1, T)  # Remove taxa observed less than once in these samples\n\nAs we make plots of taxa, it’s easier to understand if consistent colors are used for the various phyla. We can assign a color to each of these phyla then manually color plots based on this.\n\nset.seed(010101)\n\n# make a list of unique phyla\nphylalist <- data.frame(tax_table(worle), row.names = NULL) %>%\n  select(Phylum) %>%\n  unique() \nphylalist$Phylum <- as.character(phylalist$Phylum)\n\n\nlibrary(colorspace)  # this package will generate a palette based on number and desired colors\n\n# assign color from \"viridis\" package to each phyla and name the list with phyla names\ncolors <- sequential_hcl(n_distinct(phylalist), palette = \"viridis\") %>%\n  setNames(sort(phylalist$Phylum))\n\n\nFigure 1\nLet’s calculate the relative abundance of each phyla in the manure and generate summary statistics (mean, standard error, and interquartile range)\n\nglobal_size = 12 # Font size\nphydf <- worle.manure %>%\n  tax_glom(taxrank = \"Phylum\") %>%\n  transform_sample_counts(function(x) x / sum(x)) %>%\n  psmelt()  # Take manure phyloseq object and glom taxa at phyla level. Transform counts to relative abundance and melt to a data frame. \n\nsummary <- phydf %>%  # Make a plot\n  group_by(Phylum) %>%\n  summarise( \n    n=n(),\n    mean=mean(Abundance),\n    sd=sd(Abundance)\n  ) %>%\n  mutate(se = sd/sqrt(n))  %>%\n  mutate(ic = se * qt((1-0.05)/2 + .5, n-1)) %>%\n  arrange(-mean)\n\nsummary$Phylum <- factor(summary$Phylum, levels = summary$Phylum[order(-summary$mean)]) # arrange won't change order of Phylum factor levels\n\np1 <- ggplot(summary) +\n  theme_classic() +\n  geom_bar(aes(x = Phylum, y = mean, fill = Phylum), stat = \"identity\", \n           position = position_dodge(width = 0.75)) +\n  geom_errorbar( aes(x = reorder(Phylum, -mean), ymin = mean - ic, ymax = mean + ic), width = 0.2, colour = \"black\", size= 0.5) +\n  labs(y = \"Relative abundance of phyla\", x = \"Phylum\") +\n  scale_fill_manual(values = colors) +\n  theme(legend.position = \"none\", \n        axis.text.x = element_text(angle = 45, hjust = 1)) +\n  scale_y_continuous(labels = function(x) paste0(x*100, \"%\")) +\n  geom_text(x = \"Proteobacteria\", y = 0.60, label = \"A\", size = 8, family = \"Times\") +\n  theme(text = element_text(size = global_size, family = \"Times\")) \n  \np1\n\n\n\n# We can make a second smaller plot to show the abundances of the low abundance phyla\n\np2 <- ggplot(subset(summary, Phylum %in% tail(summary$Phylum, -5))) +\n  theme_classic() +\n  geom_bar(aes(x = reorder(Phylum, -mean), y = mean, fill = Phylum), stat = \"identity\", \n           position = position_dodge(width = 0.75)) +\n  geom_errorbar( aes(x = reorder(Phylum, -mean), ymin = mean - ic, ymax = mean + ic), width = 0.2, colour = \"black\", size= 0.5) +\n  labs(x = NULL, y = NULL) +\n  scale_fill_manual(values = colors) +\n  theme(legend.position = \"none\", \n        axis.text.x = element_text(angle = 45, hjust = 1)) +\n  scale_y_continuous(labels = function(x) paste0(x*100, \"%\")) +\n  geom_text(x = \"Tenericutes\", y = 0.0060, label = \"B\", size = 8, family = \"Times\") +\n  theme(text = element_text(size = global_size, family = \"Times\")) \n\np2\n\n\n\np3 <- p1 + annotation_custom(ggplotGrob(p2), xmin = \"Deinococcus-Thermus\", xmax = \"Deferribacteres\", ymin = .05, ymax = .65) \n\np3\n\n\n\n\nWe can see that the manure is mostly represented by five phyla, Firmicutes, Proteobacteria, Bacteroidetes, Actinobacetria, and Deinococcus-Thermus.\n\n# Use ggsave to save plot. I chose 6.5\" wide because most word docs are 8.5\" with 2 x 1\" margins. Keep the height below 9.5\" to save room for a caption. When you insert into your document, change the size to 6.5\" wide to ensure that the plot looks visually the same. \n\nggsave(filename = \"Figures/Fig1.jpeg\", plot = last_plot(), device = \"jpeg\", width = 7.0, height = 6.0, units = \"in\", dpi = 350)\n\nThe specific abundances of phyla are:\n\nphydf %>%\n  group_by(Phylum) %>%\n  summarise(Mean = mean(Abundance), StdDev = sd(Abundance), min = min(Abundance), max = max(Abundance)) %>%\n  arrange(-Mean)\n\n# A tibble: 20 x 5\n   Phylum                        Mean    StdDev       min       max\n   <chr>                        <dbl>     <dbl>     <dbl>     <dbl>\n 1 Firmicutes               0.555     0.0907    0.441     0.678    \n 2 Proteobacteria           0.200     0.0668    0.124     0.294    \n 3 Bacteroidetes            0.126     0.0483    0.0714    0.191    \n 4 Actinobacteria           0.0890    0.0170    0.0669    0.105    \n 5 Deinococcus-Thermus      0.0187    0.00770   0.00633   0.0261   \n 6 Chloroflexi              0.00405   0.00262   0.00185   0.00842  \n 7 Tenericutes              0.00173   0.00166   0.0000728 0.00455  \n 8 Planctomycetes           0.000927  0.000411  0.000337  0.00137  \n 9 Unclassified             0.000871  0.00116   0         0.00329  \n10 Euryarchaeota            0.000706  0.00108   0         0.00289  \n11 Verrucomicrobia          0.000526  0.000602  0         0.00158  \n12 Acidobacteria            0.000353  0.000303  0         0.000705 \n13 Synergistetes            0.000261  0.000548  0         0.00137  \n14 Elusimicrobia            0.000195  0.000385  0         0.000962 \n15 Fusobacteria             0.000153  0.000272  0         0.000670 \n16 candidate_division_WPS-1 0.000110  0.000160  0         0.000407 \n17 Cloacimonetes            0.0000796 0.000142  0         0.000351 \n18 Armatimonadetes          0.0000506 0.0000659 0         0.000166 \n19 Spirochaetes             0.0000281 0.0000688 0         0.000169 \n20 Deferribacteres          0.0000123 0.0000302 0         0.0000740\n\n\n\n\nSupp Figure S2\nAbundance of manure associated taxa\nNow let’s look at the number of unique taxa in the various samples.\n\n# strip subset, all strip soil from baseline samples in addition to no_manure_strip treatment, note the | operator \nworle.strip <- subset_samples(worle, matrix == \"soil\" & sample_day == \"Baseline\" & soil_type == \"strip\" | \n                                matrix == \"soil\" & treatment == \"no_manure_strip\" & soil_type == \"strip\") %>%\n  filter_taxa(function(x) sum(x) >= 1, T) \n\nworle.crop <- subset_samples(worle, matrix == \"soil\" & sample_day == \"Baseline\" & soil_type == \"crop\" | \n                                matrix == \"soil\" & treatment == \"no_manure_strip\" & soil_type == \"crop\") %>%\n  filter_taxa(function(x) sum(x) >= 1, T)\n\nworle.border <- subset_samples(worle, matrix == \"soil\" & sample_day == \"Baseline\" & soil_type == \"border\" | \n                                matrix == \"soil\" & treatment == \"no_manure_strip\" & soil_type == \"border\") %>%\n  filter_taxa(function(x) sum(x) >= 1, T)\n\nworle.manure <- subset_samples(worle, matrix == \"manure\") %>%\n  filter_taxa(function(x) sum(x) >= 1, T)\n\nworle.water <- subset_samples(worle, matrix == \"water\" & unique_id != \"Comp-from-P8-7-10-26-17\") %>%\n  filter_taxa(function(x) sum(x) >= 1, T)\n\n\n# Make a list of ASVs associated with each type of soil and manure\nworle_manure_asvs <- taxa_names(worle.manure)\nworle_crop_soil_asvs <- taxa_names(worle.crop)\nworle_strip_soil_asvs <- taxa_names(worle.strip)\nworle_border_asvs <- taxa_names(worle.border)\nworle_water_asvs <- taxa_names(worle.water)\n\n# venn diagram\nworle_vvv_diag <- venn(list(\"Manure_ASVs\" = worle_manure_asvs, \"Crop_ASVs\" = worle_crop_soil_asvs, \"Strip_ASVs\" = worle_strip_soil_asvs, \"Border_ASVs\" = worle_border_asvs))\n\n\n\n# Access ASVs unique to each soil and manure and store\nworle_manure_persitors <- attr(worle_vvv_diag, \"intersections\")$Manure_ASVs\nworle_crop_persistors <- attr(worle_vvv_diag, \"intersections\")$Crop_ASVs\nworle_strip_persistors <- attr(worle_vvv_diag, \"intersection\")$Strip_ASVs\nworle_border_persistors <- attr(worle_vvv_diag, \"intersections\")$Border_ASVs\n\nWe have 1017 “MAB” taxa\n\nSample_Type <- c(\"Manure\", \"Crop\", \"Strip\", \"Border\")\nNumber_of_taxa <- c(ntaxa(worle.manure), ntaxa(worle.crop), ntaxa(worle.strip), ntaxa(worle.border))\nTaxa_unique_to <- c(length(worle_manure_persitors), length(worle_crop_persistors), length(worle_strip_persistors), length(worle_border_persistors))\n\ndf <- data.frame(Sample_Type, Number_of_taxa, Taxa_unique_to)\ndf\n\n  Sample_Type Number_of_taxa Taxa_unique_to\n1      Manure           1073           1017\n2        Crop          19002           9548\n3       Strip          18043           8518\n4      Border           8140           1868\n\n\nMake a taxonomy table of the ASVs unique to manure\n\nMAB <- tax_table(worle.manure) %>%\n  data.frame() %>%\n  rownames_to_column(\"ASV\") %>%\n  filter(ASV %in% worle_manure_persitors)\nhead(MAB)\n\n     ASV  Kingdom         Phylum          Class           Order\n1   ASV4 Bacteria     Firmicutes        Bacilli      Bacillales\n2 ASV184 Bacteria     Firmicutes        Bacilli      Bacillales\n3 ASV187 Bacteria     Firmicutes        Bacilli      Bacillales\n4 ASV244 Bacteria     Firmicutes        Bacilli Lactobacillales\n5 ASV246 Bacteria Actinobacteria Actinobacteria Actinomycetales\n6 ASV269 Bacteria     Firmicutes        Bacilli      Bacillales\n              Family           Genus\n1      Bacillaceae_2    Unclassified\n2      Bacillaceae_2  Oceanobacillus\n3      Bacillaceae_2    Unclassified\n4    Enterococcaceae    Enterococcus\n5 Corynebacteriaceae Corynebacterium\n6      Bacillaceae_2    Unclassified\n\nwrite.table(MAB, file = \"Tables/MAB.csv\", sep = \",\", col.names = T,\n            qmethod = \"double\", row.names = F)\n\n\nggvenn(list(\"Manure\" = worle_manure_asvs, \"Crop\" = worle_crop_soil_asvs, \"Strip\" = worle_strip_soil_asvs, \"Border\" = worle_border_asvs), set_name_size = 4, show_percentage = F) + scale_fill_viridis_d()\n\nScale for 'fill' is already present. Adding another scale for 'fill', which\nwill replace the existing scale.\n\n\n\n\nggsave(\"Figures/SuppFig2.png\", plot = last_plot(), units = \"in\", width = 6.5, dpi = 300)\n\nSaving 6.5 x 5 in image\n\n\nWe will assign taxa to two groups, soils associated and manure associated bacteria: “SAB” and “MAB”\n\ntax_association <- tax_table(worle.water) %>% \n  data.frame() %>%\n  rownames_to_column(\"ASV\") %>%\n  mutate(ASV_Association = ifelse(ASV %in% worle_manure_persitors, \"MAB\",\"SAB\")) %>%\n  mutate(asv = ASV) %>%\n  column_to_rownames(\"ASV\") %>%\n  rename(ASV = asv) %>%\n  as.matrix() \n\ntax_table(worle.water) <- tax_association\n\nNow subset water samples to just “MAB”.\n\n# Due to sequencing depth, we have a few MAB detected in CS plots, let's note them and remove them for \"clean\" plot. \nASVsinCS <- subset_samples(worle.water, treatment == \"no_manure_strip\") %>%\n  subset_taxa(ASV_Association == \"MAB\") %>% \n  psmelt()\n\nASVsinCS <- ASVsinCS %>%\n  filter(Abundance > 0) %>%\n  select(OTU, Abundance, Phylum, Class, Order, Family, Genus)\n\nremoveASVs <- ASVsinCS$OTU\n\ncleanwater <- subset_taxa(worle.water, !ASV %in% removeASVs)\n\n\nsp <- cleanwater %>%\n  transform_sample_counts(function(x) x / sum(x)) %>%\n  subset_taxa(ASV_Association == \"MAB\")\nsp\n\nphyloseq-class experiment-level object\notu_table()   OTU Table:         [ 489 taxa and 51 samples ]\nsample_data() Sample Data:       [ 51 samples by 12 sample variables ]\ntax_table()   Taxonomy Table:    [ 489 taxa by 8 taxonomic ranks ]\nrefseq()      DNAStringSet:      [ 489 reference sequences ]\n\n\n\n\nFigure 2\n\np <- phylogeny_profile(sp, classification = 'Phylum', treatment = c(\"treatment\"), merge = TRUE, relative_abundance = F) +\n  facet_nested(. ~ treatment + plot, scales = \"free\", space = \"free\") +\n  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),\n        legend.position = \"top\") +\n  guides(fill = guide_legend(ncol=3)) +\n  labs(y = \"Relative abundance of MAB\") +\n  scale_x_discrete()\n\nScale for 'x' is already present. Adding another scale for 'x', which will\nreplace the existing scale.\n\ndf <- p$data %>%\n  separate(col = unique_id, into = c(\"p\", \"time\"), sep = \"-\") \n\nlevels(df$treatment) <- c(\"CL\", \"CSL\", \"CS\")\n\ndf$treatment <- ordered(df$treatment, levels = c(\"CS\", \"CSL\", \"CL\")) \n\nbreaks <- df %>%\n  filter(plot == 4, time == 3) %>%\n  group_by(Phylum) %>%\n  summarise(mean = mean(Abundance)) %>%\n  arrange(mean) %>% \n  select(Phylum) \n\ndf$Phylum <- factor(df$Phylum, levels = breaks$Phylum)\n\nmabbarplot <- ggplot(data = df, aes(x = time, y = Abundance, fill = Phylum)) +\n  geom_bar(stat = \"identity\", colour = \"black\") +\n  facet_nested(. ~ treatment + plot, scales = \"free\", space = \"free\") +\n  theme_classic() +\n  theme(\n    text = element_text(size = global_size, family = \"Times\"),\n    legend.position = \"top\",\n    panel.background = element_rect(color = 'black', size = 1.4),\n    strip.text.x = element_text(size = 10, face = 'bold'),\n    strip.background = element_rect(colour = 'black', size = 1.4),\n    axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +\n    scale_fill_manual(aesthetics = \"fill\", values = subset(colors, names(colors) %in% df$Phylum), breaks = breaks$Phylum) +\n    labs(x = \"Sample time (min) after runoff\", y = \"Relative abundance of LAB\") +\n  scale_x_discrete(labels = c(\"1\" = \"2.5\", \"2\" = \"7.5\", \"3\" = \"12.5\", \"4\" = \"17.5\", \"5\" = \"22.5\", \"6\" = \"27.5\")) +\n  scale_y_continuous(labels = function(x) paste0(x*100, \"%\")) +\n  guides(fill = guide_legend(nrow = 4))\n\nmabbarplot\n\n\n\n\nThe relative abundance of phyla that represent the “MAB” taxa detected in runoff water.\n\nggsave(filename = \"Figures/Fig2.jpeg\", plot = last_plot(), device = \"jpeg\", width = 7, height = 6, units = \"in\", dpi = 350)\n\n\n\nFigure 3\nOnly plot 8 most abundant phyla to keep plot cleaner\n\nsummary <- df %>%\n  filter(!treatment == \"CS\") %>% # Remove no manure treatment\n  group_by(Phylum, \n           plot, \n           treatment) %>%\n  summarise( \n    n=n(),\n    mean=mean(Abundance),\n    sd=sd(Abundance)) %>%\n  mutate(se = sd/sqrt(n))  %>%\n  mutate(ic = se * qt((1-0.05)/2 + .5, n-1)) %>%\n  arrange(plot, -mean) %>% \n  ungroup()\n\n`summarise()` has grouped output by 'Phylum', 'plot'. You can override using the `.groups` argument.\n\nEightPhyla <- summary %>%\n  group_by(Phylum) %>%\n  mutate(mean = mean(mean)) %>%\n  arrange(-mean) %>%\n  select(Phylum) %>%\n  distinct() %>%\n  head(8) # Use head with n = 8 to select eight phyla\n\nsummary$plot <- as.factor(summary$plot)\n\nsummary <- summary %>%\n  filter(Phylum %in% EightPhyla$Phylum)\n\nggplot(summary, aes(x = reorder(Phylum, -mean), y = mean, fill = plot)) +\n  geom_bar(stat = \"identity\", \n           position = position_dodge(width = 1)) +\n  geom_errorbar(aes(x = reorder(Phylum, -mean), ymin = mean - ic, ymax = mean + ic), \n           position = position_dodge(width = 1), width = 0.2, colour = \"black\", size= 0.5) +\n  labs(y = \"Relative abundance of phyla\", x = \"Phylum\") +\n  facet_grid( ~ treatment) +\n  theme_classic() + \n  theme(text = element_text(size = global_size, family = \"Times\"),\n    axis.text.x = element_text(angle = 90, hjust = 1)) +\n  scale_fill_viridis_d(name = \"Plot\") +\n  scale_y_continuous(labels = function(x) paste0(x*100, \"%\")) # Here we can multiply the relative abundance by 100 and add a % mark, note that any tables generated will still need to be multiplied by 100. \n\n\n\nggsave(filename = \"Figures/Fig3.jpeg\", plot = last_plot(), device = \"jpeg\", width = 7, height = 6, units = \"in\", dpi = 350)\n\nLAB treatment mean\n\ndf %>%\n  group_by(treatment, plot, time) %>%\n  summarise(\n    MAB_Abundance = sum(Abundance)) %>% \n  ungroup() %>%\n  group_by(treatment, plot) %>%\n  summarise(\n    mean_mab = mean(MAB_Abundance)) %>%\n  ungroup() %>%\n  group_by(plot) %>%\n  summarise(trtMeanMab = mean(mean_mab))\n\n`summarise()` has grouped output by 'treatment', 'plot'. You can override using the `.groups` argument.\n\n\n`summarise()` has grouped output by 'treatment'. You can override using the `.groups` argument.\n\n\n# A tibble: 9 x 2\n   plot trtMeanMab\n  <dbl>      <dbl>\n1     1    0      \n2     2    0      \n3     3    0      \n4     4    0.552  \n5     5    0.0110 \n6     6    0.00284\n7     7    0.0893 \n8     8    0.100  \n9     9    0.312"
  },
  {
    "objectID": "WaterFlow.html",
    "href": "WaterFlow.html",
    "title": "Water Flow",
    "section": "",
    "text": "Supp Figure S4\nThis plot shows the flow rate for each sample from each plot.\nIf we plot MAB vs. flow, do prairie strips have an impact?\n\nlibrary(readxl)\nlibrary(tidyverse)\nlibrary(ggpubr)\nlibrary(rstatix)\n\n\nAttaching package: 'rstatix'\n\n\nThe following object is masked from 'package:stats':\n\n    filter\n\n\n\nmabbarplot <- readRDS(file = \"Data/mabbarplot.RDS\")\n\n\nflow <- read_excel(\"Data/WOR_Water_flow.xlsx\")\n\nflow$sample_number <- as.character(flow$sample_number)\n\n\nggplot(flow, aes(x = as.factor(sample_number), y = `flow_g/s`, group = as.factor(plot))) +\n  geom_line(position = position_dodge(width = .3)) +\n  geom_point(aes(color = as.factor(treatment)), position = position_dodge(width = .3), size = 5) +\n  geom_text(aes(label = plot), position = position_dodge(width = .3), show.legend = F) +\n  theme_classic() +\n  theme(\n    legend.position = \"top\", \n    panel.background = element_rect(color = 'black', size = 1.4),\n    strip.text.x = element_text(size = 10, face = 'bold'),\n    strip.background = element_rect(colour = 'black', size = 1.4),\n    axis.text.x = element_text(angle = 0, vjust = 0, hjust = 0.5)) +\n    scale_color_viridis_d() +\n    labs(x = \"Time after runoff start (min)\", y = \"Flow (mL/s)\", color = \"Treatment \\n(points labeled with plot)\") +\n    scale_x_discrete(labels = c(\"1\" = \"2.5\", \"2\" = \"7.5\", \"3\" = \"12.5\", \"4\" = \"17.5\", \"5\" = \"22.5\", \"6\" = \"27.5\"))\n\n\n\nggsave(filename = \"Figures/SupFig4.png\", plot = last_plot(), device = \"png\", width = 6.5, height = 7.5, units = \"in\", dpi = 350)\n\n\n\nSupp Figure S5\n\nnorm <- readRDS(file = \"Data/norm.RDS\") # Load norm data from ARGs.qmd\n\nSixS <- norm %>%\n  filter(Assay == \"16S_Eub_338_518\") \nSixS\n\n# A tibble: 198 x 8\n   plot  sample_number   rep treatment Assay       gene_class counts Value      \n   <chr> <chr>         <int> <chr>     <chr>       <chr>       <dbl> <chr>      \n 1 2     5                 1 WCS       16S_Eub_33… 16S          844. 18.3926544…\n 2 2     5                 2 WCS       16S_Eub_33… 16S          858. 18.3668106…\n 3 2     5                 3 WCS       16S_Eub_33… 16S         1308. 17.7039409…\n 4 2     3                 1 WCS       16S_Eub_33… 16S          715. 18.6550587…\n 5 2     3                 2 WCS       16S_Eub_33… 16S          733. 18.6149361…\n 6 2     3                 3 WCS       16S_Eub_33… 16S         1173. 17.8757951…\n 7 2     1                 1 WCS       16S_Eub_33… 16S         3359. 16.2208645…\n 8 2     1                 2 WCS       16S_Eub_33… 16S         3564. 16.1278807…\n 9 2     1                 3 WCS       16S_Eub_33… 16S         4399. 15.7965356…\n10 1     5                 1 WCS       16S_Eub_33… 16S           NA  <NA>       \n# … with 188 more rows\n\nSixS$treatment = factor(SixS$treatment, \n                             levels = c('WCS', 'WCSM', 'WCM'))\nlevels(SixS$treatment) <- list(\"CS\"=\"WCS\", \"CSM\"=\"WCSM\", \"CM\"=\"WCM\")\nSixS$sample_number <- as.factor(SixS$sample_number)\nlevels(SixS$sample_number) <- list(\"2.5\" = \"1\", \"7.5\" = \"2\", \"12.5\" = \"3\", \"17.5\" = \"4\", \"22.5\" = \"5\", \"27.5\" = \"6\")\n\nmy_comparisons <- list( c(\"WCS\", \"WCSM\"), c(\"WCS\", \"WCM\"), c(\"WCM\", \"WCSM\"))\n\nsig <- SixS %>%\n  filter(!rep %in% c(4,5,6)) %>%\n  droplevels()\n\nsig\n\n# A tibble: 162 x 8\n   plot  sample_number   rep treatment Assay       gene_class counts Value      \n   <chr> <fct>         <int> <fct>     <chr>       <chr>       <dbl> <chr>      \n 1 2     22.5              1 CS        16S_Eub_33… 16S          844. 18.3926544…\n 2 2     22.5              2 CS        16S_Eub_33… 16S          858. 18.3668106…\n 3 2     22.5              3 CS        16S_Eub_33… 16S         1308. 17.7039409…\n 4 2     12.5              1 CS        16S_Eub_33… 16S          715. 18.6550587…\n 5 2     12.5              2 CS        16S_Eub_33… 16S          733. 18.6149361…\n 6 2     12.5              3 CS        16S_Eub_33… 16S         1173. 17.8757951…\n 7 2     2.5               1 CS        16S_Eub_33… 16S         3359. 16.2208645…\n 8 2     2.5               2 CS        16S_Eub_33… 16S         3564. 16.1278807…\n 9 2     2.5               3 CS        16S_Eub_33… 16S         4399. 15.7965356…\n10 1     22.5              1 CS        16S_Eub_33… 16S           NA  <NA>       \n# … with 152 more rows\n\np <- ggplot(sig, aes(x=treatment, y=counts, fill = treatment)) + \n  geom_boxplot() +\n  labs(x = \"Treatment\", y = \"Log 10 gene 16s copies\") +\n  scale_y_continuous(trans = 'log10') +\n  scale_fill_viridis_d() +\n  facet_wrap( ~ sample_number) +\n  theme_pubr() +\n  theme(\n    legend.background = element_rect(\n      fill = (alpha = 0),\n      color = 'black',\n      size = 0.1),\n    panel.background = element_rect(color = 'black', size = 1.4),\n    strip.text.x = element_text(size = 10, face = 'bold'),\n    strip.background = element_rect(colour = 'black', size = 1.4),\n    legend.position = \"none\") \np  \n\nWarning: Removed 6 rows containing non-finite values (stat_boxplot).\n\n\n\n\n\n\nkrusk.test <- sig %>%\n  group_by(sample_number) %>%\n  kruskal_test(counts ~ treatment)\nkrusk.test\n\n# A tibble: 6 x 7\n  sample_number .y.        n statistic    df        p method        \n* <fct>         <chr>  <int>     <dbl> <int>    <dbl> <chr>         \n1 2.5           counts    27      9.00     2 0.0111   Kruskal-Wallis\n2 7.5           counts    27      9.43     2 0.00895  Kruskal-Wallis\n3 12.5          counts    27     17.0      2 0.000206 Kruskal-Wallis\n4 17.5          counts    27      5.66     2 0.0591   Kruskal-Wallis\n5 22.5          counts    27      3.41     2 0.182    Kruskal-Wallis\n6 27.5          counts    27      4.02     2 0.134    Kruskal-Wallis\n\nstat.test <- sig %>%\n  group_by(sample_number) %>%\n  dunn_test(counts ~ treatment) %>%\n  adjust_pvalue(method = \"hochberg\") %>%\n  mutate(y.position = rep(c(log10(100000), log10(300000), log10(1000000)), 6))\nstat.test\n\n# A tibble: 18 x 11\n   sample_number .y.    group1 group2    n1    n2 statistic        p   p.adj\n * <fct>         <chr>  <chr>  <chr>  <int> <int>     <dbl>    <dbl>   <dbl>\n 1 2.5           counts CS     CSM        9     9     1.46  0.146    0.878  \n 2 2.5           counts CS     CM         9     9     3.00  0.00271  0.0433 \n 3 2.5           counts CSM    CM         9     9     1.54  0.123    0.878  \n 4 7.5           counts CS     CSM        8     9     2.52  0.0117   0.163  \n 5 7.5           counts CS     CM         8     9     2.82  0.00478  0.0717 \n 6 7.5           counts CSM    CM         9     9     0.308 0.758    0.878  \n 7 12.5          counts CS     CSM        9     9     3.18  0.00149  0.0253 \n 8 12.5          counts CS     CM         9     9     3.86  0.000113 0.00204\n 9 12.5          counts CSM    CM         9     9     0.683 0.495    0.878  \n10 17.5          counts CS     CSM        8     9     1.82  0.0693   0.693  \n11 17.5          counts CS     CM         8     9     2.26  0.0235   0.306  \n12 17.5          counts CSM    CM         9     9     0.462 0.644    0.878  \n13 22.5          counts CS     CSM        6     9     1.27  0.205    0.878  \n14 22.5          counts CS     CM         6     9     1.83  0.0667   0.693  \n15 22.5          counts CSM    CM         9     9     0.633 0.527    0.878  \n16 27.5          counts CS     CSM        8     9     1.67  0.0941   0.847  \n17 27.5          counts CS     CM         8     9     1.82  0.0682   0.693  \n18 27.5          counts CSM    CM         9     9     0.154 0.878    0.878  \n# … with 2 more variables: p.adj.signif <chr>, y.position <dbl>\n\np <- ggboxplot(sig, x = \"treatment\", y = \"counts\", facet.by = \"sample_number\") +\n  scale_y_continuous(trans = \"log10\")\n\noptions(scipen = 5)\n\np + \n  stat_pvalue_manual(stat.test, hide.ns = T) +\n  theme_pubr() +\n  labs(x = \"Treatment\", y = \"Log 10 gene 16s copies\",\n       caption = get_pwc_label(stat.test)) +\n  scale_x_discrete(labels = c(\"CSM\" = \"CSL\", \"CM\" = \"CL\"))\n\nWarning: Removed 6 rows containing non-finite values (stat_boxplot).\n\n\n\n\nggsave(filename = \"Figures/SuppFiggS5.png\", plot = last_plot(), device = \"png\", units = \"in\", width = 6.5, height = 7.5, dpi = 300)\n\nWarning: Removed 6 rows containing non-finite values (stat_boxplot).\n\n\n\n\nSupp Figure S6\n\ndf <- mabbarplot$data %>%\n  group_by(plot, time) %>%\n  mutate(SumAbund = sum(Abundance)) %>%\n  rename(sample_number = time) %>%\n  ungroup() %>%\n  left_join(flow, by = c(\"plot\", \"sample_number\")) %>%\n  select(treatment.x, plot, sample_number, SumAbund, time_after_runoff_start, collection_time_sec, jare_tare_wt_g, jare_plus_runoff_wt_g, `flow_g/s`)\n\nwrite_excel_csv(df, file = \"Data/water_flow_with_MAB.csv\")\n\nlmplot <- df %>%\n  filter(!treatment.x == \"CS\") %>%\n  ggplot(aes(x = `flow_g/s`, y = SumAbund, color = treatment.x)) +\n  geom_point() +\n  geom_smooth(method = lm, se = FALSE)  +\n  scale_color_manual(values = c(\"darkgreen\", \"tan4\"), name = \"Treatment\") +\n  theme_bw()\n\nlmplot\n\n`geom_smooth()` using formula 'y ~ x'\n\n\n\n\n\n\n# Two seperate lm's to calculated where they intersect\nCM <- df %>%\n  filter(!treatment.x %in% c(\"CS\", \"CSL\")) %>%\n  lm(SumAbund ~ `flow_g/s`, data = .)\nsummary(CM)$r.squared\n\n[1] 0.5325833\n\nsummary(CM)$adj.r.squared\n\n[1] 0.5305686\n\nCSM <- df %>%\n  filter(!treatment.x %in% c(\"CS\", \"CL\")) %>%\n  lm(SumAbund ~ `flow_g/s`, data = .)\nsummary(CSM)$r.squared\n\n[1] 0.5541166\n\nsummary(CSM)$adj.r.squared\n\n[1] 0.5521947\n\n# where do the two lines intersect? \ncm <- rbind(coef(CM),coef(CSM)) # Coefficient matrix\nc(-solve(cbind(cm[,2],-1)) %*% cm[,1])\n\n[1] 7.373952 0.286310\n\nlmplot <- df %>%\n  filter(!treatment.x == \"CS\") %>%\n  ggplot(aes(x = `flow_g/s`, y = SumAbund, color = treatment.x)) +\n  geom_point() +\n  geom_smooth(method = lm, se = FALSE) +\n  geom_point(x = 7.373952, y = 0.286310, color = \"black\") +\n  annotate(\"text\", x = 8.1, y = 0.24, label = \"7.37 (mL/s)\") +\n  stat_cor(aes(label = paste(..rr.label.., ..p.label.., sep = \"~`,`~\")), \n    label.x = 3, show.legend = F) +\n  labs(x = \"Flow (mL/s)\", y = \"Relative abundance (%)\") +\n  scale_y_continuous(labels = function(x) paste0(x*100, \"%\")) +\n  annotate(\"segment\", x = 7.373952, xend = 7.6, y = 0.286310, yend = 0.26,\n  colour = \"black\") +\n  scale_color_manual(name = \"Treatment\", labels = c(\"CSL\", \"CL\"), values = c(\"darkgreen\", \"tan4\")) +\n  theme_bw() \n\nlmplot\n\n`geom_smooth()` using formula 'y ~ x'\n\n\n\n\nggsave(filename = \"Figures/SupFig6.png\", plot = last_plot(), device = \"png\", width = 6.5, height = 7.5, units = \"in\", dpi = 350)\n\n`geom_smooth()` using formula 'y ~ x'\n\n\n\n\nSupp Figure S7\nIf we plot MAB vs. flow, do prairie strips have an impact?\n\n\n\nLook at differences in sample volume, time to collect ::: {.cell hash=“WaterFlow_cache/html/unnamed-chunk-18_ea17828036dab054f63262c87972c004”}\ncolnames(df)\n\n[1] \"treatment.x\"             \"plot\"                   \n[3] \"sample_number\"           \"SumAbund\"               \n[5] \"time_after_runoff_start\" \"collection_time_sec\"    \n[7] \"jare_tare_wt_g\"          \"jare_plus_runoff_wt_g\"  \n[9] \"flow_g/s\"               \n\nggplot(df, aes(x = as.factor(sample_number), y = collection_time_sec, fill = as.factor(plot))) +\n  geom_bar(stat = \"identity\", position = \"dodge\") +\n  facet_grid(~ treatment.x) +\n  ggtitle(\"Sample Collection time\")\n\n\n\nggplot(df, aes(x = as.factor(sample_number), y = jare_plus_runoff_wt_g - jare_tare_wt_g, fill = as.factor(plot))) +\n  geom_bar(stat = \"identity\", position = \"dodge\") +\n  facet_grid(~ treatment.x) +\n  ggtitle(\"Sample Volume\")\n\n\n\n:::\nA simple scatter plot looking at flow vs abundance, with a lm line fitted to each treatment.\n\n\n[1] \"numeric\"\n\n\n`geom_smooth()` using formula 'y ~ x'\n\n\n\n\n\nIt appears that up to a flow of 7.5 g/s, strips may be effective at removing MAB in runoff water when compared to if no strips are present.\nCalculate corrected (cor) MAB abundance by dividing MAB abundance by flow in each sample. Then calculate the treatment mean, sd, se and interquartile.\n\n\n\n\n\n\n\n\nHere, despite the error bars, we have indications that when strips are present, there is less MAB in runoff water.\nEvent mean concentration (EMC)\nEMC calculation\nFor a plot we have\n\n6 water samples\nMass (vol) of water collected at each sample\nTime to collect each sample\nCount of ARGs filtered out of sample\n\nThe calculation\nEvent load (EL)\n\\[\n=\\frac{{T1ARGConc}*{T1Vol}+{T2ARGConc}*{T2Vol}+{T3ARGConc}*{T3Vol}+{T4ARGConc}*{T4Vol}+{T5ARGConc}*{T5Vol}+{T6ARGConc}*{T6Vol}}{Event TotalVol}\n\\]\n\n # Load copy number from HT-qPCR runs\n # If you haven't calculated copy numbers yet,\n # see: \\#\\#\\#\\#\\#\\#\\#\n water_counts <- read_csv(\"Data/WORWATERARGCOUNTS.csv\")\n\n\n── Column specification ────────────────────────────────────────────────────────\ncols(\n  .default = col_character(),\n  rConc = col_double(),\n  Value = col_double(),\n  `Calibrated rConc` = col_double(),\n  Quality = col_double(),\n  Threshold = col_double(),\n  `In Range` = col_double(),\n  `Out Range` = col_double(),\n  `Peak Ratio` = col_double(),\n  counts = col_double()\n)\nℹ Use `spec()` for the full column specifications.\n\n head(water_counts)\n\n# A tibble: 6 x 22\n  Sample_Name Sample_Type Assay Assay_Type ID      rConc Value `Calibrated rCon…\n  <chr>       <chr>       <chr> <chr>      <chr>   <dbl> <dbl>             <dbl>\n1 P2_5        Unknown     tetbP Test       S06-A28     1   999                -1\n2 P2_5        Unknown     tetbP Test       S06-A29     1   999                -1\n3 P2_5        Unknown     tetbP Test       S06-A30     1   999                -1\n4 P2_3        Unknown     tetbP Test       S05-A28     1   999                -1\n5 P2_3        Unknown     tetbP Test       S05-A29     1   999                -1\n6 P2_3        Unknown     tetbP Test       S05-A30     1   999                -1\n# … with 14 more variables: Quality <dbl>, Call <chr>, Threshold <dbl>,\n#   In Range <dbl>, Out Range <dbl>, Peak Ratio <dbl>, soil_type <chr>,\n#   plot <chr>, treatment <chr>, block <chr>, sample_day <chr>,\n#   sample_number <chr>, sample_type <chr>, counts <dbl>"
  },
  {
    "objectID": "ARGs.html",
    "href": "ARGs.html",
    "title": "ARGs",
    "section": "",
    "text": "ARG Figures\n\nlibrary(tidyverse)\nlibrary(viridisLite)\nlibrary(ggh4x)\nlibrary(ggpubr)\nlibrary(rstatix)\nlibrary(ggtext)\n\n\ndf <- readRDS(\"Data/metawithbiomark.RDS\") \n\n\nstandard <- df %>%\n  filter(sample_type %in% \"standard\")\n\n\nPC_Standards_no_NA <- readRDS(\"Data/ampliconlengths.RDS\")\nPC_Standards_no_NA\n\n# A tibble: 46 x 3\n   gene          Assay       amp_len\n   <chr>         <chr>       <chr>  \n 1 aadA9_F       aadA9       251    \n 2 ant6-ia_F     ant6-ia     313    \n 3 ant6-ib_F     ant6-ib     251    \n 4 aph(3'')-ia_F aph(3'')-ia 301    \n 5 erm(35)_F     erm(35)     251    \n 6 erm(B)_F      erm(B)      251    \n 7 erm(C)_F      erm(C)      251    \n 8 erm(F)_F      erm(F)      251    \n 9 erm(Q)_F      erm(Q)      287    \n10 ermA/ermTR_F  ermA/ermTR  251    \n# … with 36 more rows\n\n\nCalculating limit of detection for each gene\n\nfiltered_standard <- standard %>% \n  filter(Sample_Name == Assay)\nlod_max_by_gene <- filtered_standard %>% \n  group_by(rConc, Sample_Name) %>%\n  filter(any(Call == \"Pass\")) %>% \n  mutate(Value = as.numeric(Value)) %>% \n  filter(!Call == \"Flag\") %>%\n  summarise(max_lod = max(Value)) %>% \n  group_by(Sample_Name) %>% \n  slice_max(max_lod) \n\n`summarise()` has grouped output by 'rConc'. You can override using the `.groups` argument.\n\nlod_max_by_gene %>% \n  ggplot(aes(Sample_Name, max_lod)) +\n  geom_col(aes(fill = rConc)) +\n  theme_light() +\n  theme(\n    axis.text.x = element_text(angle = 90, hjust = 1)\n  ) +\n  scale_y_continuous(expand = expansion(add = c(0, 0), mult = c(0, 0.1))) \n\n\n\ncounts <- filtered_standard %>%\n  group_by(rConc, Sample_Name) %>% \n  filter(any(Call == \"Pass\")) %>% \n  select(Sample_Name, Assay, rConc, Value, Call)  %>%\n  ungroup() %>%  \n  filter(!Call == \"Flag\") %>%\n    left_join(PC_Standards_no_NA) %>%\n    select(Assay, rConc, Value, amp_len) %>%\n    mutate(counts = as.numeric(rConc) * (1/(10^9)) * (1/660) * ((6.023*10^23)/1) * (1/as.numeric(amp_len)) * (.0067)) %>%\n    mutate(Value = as.numeric(Value))\n\nJoining, by = \"Assay\"\n\n\n\nlod_max_by_gene\n\n# A tibble: 16 x 3\n# Groups:   Sample_Name [16]\n   rConc Sample_Name        max_lod\n   <chr> <chr>                <dbl>\n 1 1e-07 16S_Eub_338_518       24.7\n 2 1e-06 aadA9                 23.4\n 3 1e-07 erm(C)                26.4\n 4 0.001 intI1F165_clinical    27.3\n 5 1e-05 IS6100                22.2\n 6 1e-06 strB                  22.9\n 7 1e-06 sul1 NEW              22.7\n 8 1e-06 sul2                  22.6\n 9 1e-07 tetbP                 24.7\n10 1e-06 tetG_F                23.5\n11 1e-06 tetH                  23.3\n12 1e-05 tetL                  19.5\n13 1e-06 tetM                  22.5\n14 1e-06 tetT                  21.9\n15 1e-06 tetW                  21.5\n16 1e-06 tetX                  22.6\n\n\n\nlm_eqn = function(df){\n    m = lm(data = df, formula = as.numeric(Value) ~ log10(counts + 1))\n    b = coef(m)[2]  \n    data.frame(\n      eff = round(100*((10^(-1/b))-1), digits = 2),\n      r2 = format(summary(m)$r.squared, digits = 3),\n      LOD = round(max(df$Value), digits = 2),\n      Intercept = round(coef(m)[1], digits = 2),\n      Slope = round(coef(m)[2], digits = 2)\n    )\n}\nst_splits <-  counts %>% \n  group_by(Assay) %>% \n  group_split() \neqs <- st_splits %>% \n  lapply(., lm_eqn) %>% \n  bind_rows()\nlabels <- lapply(st_splits, slice_head, n = 1) %>% \n  bind_rows() %>% \n  select(Assay) %>% \n  bind_cols(eqs) %>% \n  mutate(eq_label = paste0(\"LOD = \", LOD, \"<br>r^2 = \", r2, \"<br>Efficiency = \", eff, \"<br>Slope = \", Slope, \"<br>Intercept = \", Intercept))\nSCPlots <- counts %>%\n  ggplot(aes(as.numeric(log10(counts + 1)), as.numeric(Value))) +\n  geom_point() +\n  facet_wrap( ~ Assay, scales = \"free\") + \n  theme(\n    panel.border = element_rect(color = \"black\", size = 1, fill = NA),\n    panel.grid.minor.x = element_blank(),\n    panel.grid.minor.y = element_blank(),\n    panel.spacing = unit(0.5, \"lines\"),\n    strip.background = element_rect(color = \"black\", size = 1, fill = NA),\n  ) + \n  labs(\n    x = \"Log10 (gene copies per reaction)\",\n    y = \"Ct\"\n  ) + \n  scale_x_continuous(limits = c(0, 7), breaks = seq(0, 7, 1), expand = c(0, 0)) + \n  scale_y_continuous(limits = c(0, 25)) +\n  geom_smooth(aes(group=1), method=\"lm\", se=FALSE) + \n  ggtext::geom_richtext(data = labels, aes(x = 2, y = 5, label = eq_label),\n                        size = 4, fontface = \"bold\", inherit.aes = FALSE) +\n  theme(\n    text = element_text(size = 12, family = \"Times\"),\n    panel.background = element_rect(color = 'black', size = 1.4),\n    strip.text.x = element_text(size = 10, face = 'bold'),\n    strip.background = element_rect(colour = 'black', size = 1.4),\n    axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),\n    legend.position = \"top\",\n    legend.key.width = unit(.75, \"in\")\n  ) \nSCPlots\n\n`geom_smooth()` using formula 'y ~ x'\n\n\nWarning: Removed 7 rows containing non-finite values (stat_smooth).\n\n\nWarning: Removed 7 rows containing missing values (geom_point).\n\n\nWarning: Removed 6 rows containing missing values (geom_smooth).\n\n\n\n\n# Save a table of the information from each curve\nLODtable <- labels %>%\n  select(!eq_label)\nLODtable\n\n# A tibble: 16 x 6\n   Assay                eff r2      LOD Intercept Slope\n   <chr>              <dbl> <chr> <dbl>     <dbl> <dbl>\n 1 16S_Eub_338_518     95.1 0.952  24.7      28.3 -3.45\n 2 aadA9               81.7 0.932  23.4      29.4 -3.86\n 3 erm(C)              82.6 0.969  26.4      29.2 -3.82\n 4 intI1F165_clinical  49.4 0.855  27.3      47.0 -5.73\n 5 IS6100              89.7 0.947  22.2      26.1 -3.6 \n 6 strB                81.5 0.981  22.9      29.5 -3.86\n 7 sul1 NEW            94.4 0.989  22.7      26.1 -3.46\n 8 sul2               106.  0.975  22.6      25.1 -3.19\n 9 tetbP               92.7 0.99   24.7      25.9 -3.51\n10 tetG_F              87.7 0.985  23.5      26.2 -3.66\n11 tetH                82.2 0.999  23.3      28.3 -3.84\n12 tetL                85.9 0.999  19.5      28.3 -3.71\n13 tetM                78.3 0.997  22.5      27.4 -3.98\n14 tetT                86.3 0.998  21.9      26.4 -3.7 \n15 tetW                97.6 0.997  21.5      26.5 -3.38\n16 tetX                77.6 0.998  22.6      27.8 -4.01\n\nwrite_csv(LODtable, file = \"Data/standardcurves.csv\")\n\nCalculating counts in an environmental sample\n\ncounts\n\n# A tibble: 425 x 5\n   Assay           rConc Value amp_len counts\n   <chr>           <chr> <dbl> <chr>    <dbl>\n 1 tetbP           1e-07  24.7 251       2.44\n 2 sul1 NEW        1e-07  21.8 251       2.44\n 3 IS6100          1e-07  21.4 251       2.44\n 4 erm(C)          1e-07  26.4 251       2.44\n 5 16S_Eub_338_518 1e-07  24.7 257       2.38\n 6 tetbP           1e-06  22.1 251      24.4 \n 7 tetbP           1e-06  20.7 251      24.4 \n 8 tetbP           1e-06  20.5 251      24.4 \n 9 sul1 NEW        1e-06  22.7 251      24.4 \n10 sul1 NEW        1e-06  20.8 251      24.4 \n# … with 415 more rows\n\n\nEnvironment Ct values\n\nwater <- df %>%\n  filter(sample_type %in% \"water\", !Sample_Name == \"Supply_Water\")\nwater\n\n# A tibble: 6,336 x 21\n   Sample_Name Sample_Type Assay  Assay_Type ID     rConc Value `Calibrated rCo…\n   <chr>       <chr>       <chr>  <chr>      <chr>  <chr> <chr> <chr>           \n 1 P2_5        Unknown     16S_E… Test       S06-A… 1     18.3… 4.9938279547795…\n 2 P2_5        Unknown     16S_E… Test       S06-A… 1     18.3… 5.0738800340691…\n 3 P2_5        Unknown     16S_E… Test       S06-A… 1     17.7… 7.6293726452979…\n 4 P2_5        Unknown     sul1 … Test       S06-A… 1     999   -1              \n 5 P2_5        Unknown     sul1 … Test       S06-A… 1     999   -1              \n 6 P2_5        Unknown     sul1 … Test       S06-A… 1     999   -1              \n 7 P2_5        Unknown     erm(3… Test       S06-A… 1     999   -1              \n 8 P2_5        Unknown     erm(3… Test       S06-A… 1     999   -1              \n 9 P2_5        Unknown     erm(3… Test       S06-A… 1     999   -1              \n10 P2_5        Unknown     tetW   Test       S06-A… 1     999   -1              \n# … with 6,326 more rows, and 13 more variables: Quality <chr>, Call <chr>,\n#   Threshold <chr>, In Range <chr>, Out Range <chr>, Peak Ratio <chr>,\n#   soil_type <chr>, plot <chr>, treatment <chr>, block <chr>,\n#   sample_day <fct>, sample_number <chr>, sample_type <chr>\n\nsoil <- df %>%\n  filter(sample_type %in% \"soil\")\nsoil\n\n# A tibble: 10,944 x 21\n   Sample_Name Sample_Type Assay  Assay_Type ID     rConc Value `Calibrated rCo…\n   <chr>       <chr>       <chr>  <chr>      <chr>  <chr> <chr> <chr>           \n 1 C_1_TB_1    Unknown     16S_E… Test       S95-A… 1     15.1… 0.0001944385882…\n 2 C_1_TB_1    Unknown     16S_E… Test       S95-A… 1     14.8… 0.0002366823806…\n 3 C_1_TB_1    Unknown     16S_E… Test       S95-A… 1     14.9… 0.0002276031810…\n 4 C_1_TB_1    Unknown     sul1 … Test       S95-A… 1     999   -1              \n 5 C_1_TB_1    Unknown     sul1 … Test       S95-A… 1     999   -1              \n 6 C_1_TB_1    Unknown     sul1 … Test       S95-A… 1     999   -1              \n 7 C_1_TB_1    Unknown     erm(3… Test       S95-A… 1     999   -1              \n 8 C_1_TB_1    Unknown     erm(3… Test       S95-A… 1     999   -1              \n 9 C_1_TB_1    Unknown     erm(3… Test       S95-A… 1     999   -1              \n10 C_1_TB_1    Unknown     tetW   Test       S95-A… 1     999   -1              \n# … with 10,934 more rows, and 13 more variables: Quality <chr>, Call <chr>,\n#   Threshold <chr>, In Range <chr>, Out Range <chr>, Peak Ratio <chr>,\n#   soil_type <chr>, plot <chr>, treatment <chr>, block <chr>,\n#   sample_day <fct>, sample_number <chr>, sample_type <chr>\n\nunique(water$Sample_Name)\n\n [1] \"P2_5\" \"P2_3\" \"P2_1\" \"P1_5\" \"P1_3\" \"P1_1\" \"P2_6\" \"P2_4\" \"P2_2\" \"P1_6\"\n[11] \"P1_4\" \"P1_2\" \"P3_5\" \"P3_3\" \"P3_1\" \"P3_6\" \"P3_4\" \"P3_2\" \"P9_6\" \"P4_5\"\n[21] \"P9_4\" \"P4_3\" \"P9_2\" \"P4_1\" \"P9_5\" \"P4_6\" \"P9_3\" \"P4_4\" \"P9_1\" \"P4_2\"\n[31] \"P8_6\" \"P5_5\" \"P8_4\" \"P5_3\" \"P8_2\" \"P5_1\" \"P8_5\" \"P5_6\" \"P8_3\" \"P5_4\"\n[41] \"P8_1\" \"P5_2\" \"P7_6\" \"P6_5\" \"P7_4\" \"P6_3\" \"P7_2\" \"P6_1\" \"P7_5\" \"P6_6\"\n[51] \"P7_3\" \"P6_4\" \"P7_1\" \"P6_2\"\n\n\n\nget_counts <- function(stddf, ctdf, gene){\n  #stddf <- counts # use to test\n  #ctdf <- water # use to test\n  #gene <- \"tetM\" # use to test\n  std <- stddf %>%\n    filter(Assay == gene)\n  ctd <- ctdf %>%\n    filter(Assay == gene)\n  inverse.lm <- lm(data = std, formula = log10(counts+1) ~ as.numeric(Value)) # Note log10 transformation\n  \n  val2 <- ctd$Value\n  \n  ctd$counts <- 10 ^ predict(inverse.lm ,data.frame(Value = val2), interval = \"predict\")[,1] \n  return(ctd)\n}\n\n\nunique(counts$Assay)\n\n [1] \"tetbP\"              \"sul1 NEW\"           \"IS6100\"            \n [4] \"erm(C)\"             \"16S_Eub_338_518\"    \"strB\"              \n [7] \"intI1F165_clinical\" \"aadA9\"              \"tetG_F\"            \n[10] \"sul2\"               \"tetW\"               \"tetT\"              \n[13] \"tetL\"               \"tetM\"               \"tetH\"              \n[16] \"tetX\"              \n\nunique(water$Assay)\n\n [1] \"16S_Eub_338_518\"    \"sul1 NEW\"           \"erm(36)\"           \n [4] \"tetW\"               \"aac3-Via\"           \"sul2\"              \n [7] \"erm(C)\"             \"tetX\"               \"aadA17\"            \n[10] \"tetbP\"              \"int1-a-marko\"       \"tnpA1\"             \n[13] \"aadA9\"              \"tetG_F\"             \"intI1F165_clinical\"\n[16] \"tnpA2\"              \"tetH\"               \"aadD\"              \n[19] \"tnpA3\"              \"lnuA\"               \"tetL\"              \n[22] \"aphA3\"              \"tnpA5\"              \"IS1247\"            \n[25] \"tetM\"               \"cadC\"               \"tnpA6\"             \n[28] \"IS6100\"             \"tetT\"               \"cmr\"               \n[31] \"tnpA7\"              \"strB\"              \n\n\nBy changing high Ct values to NA, we clean up the heatmap by converting these “non detects” to gray color tiles\n\n# Change high Ct values to NA\nwater$Value[water$Value > 30] <- NA\nsoil$Value[soil$Value > 30] <- NA\n\n\n\nc(\"tetbP\", \"sul1 NEW\", \"IS6100\", \"erm(C)\", \"16S_Eub_338_518\", \n\"strB\", \"intI1F165_clinical\", \"aadA9\", \"tetG_F\", \"sul2\", \"tetW\", \n\"tetT\", \"tetL\", \"tetM\", \"tetH\", \"tetX\")\n\n\nJoining, by = c(\"Sample_Name\", \"Sample_Type\", \"Assay\", \"Assay_Type\", \"ID\", \"rConc\", \"Value\", \"Calibrated rConc\", \"Quality\", \"Call\", \"Threshold\", \"In Range\", \"Out Range\", \"Peak Ratio\", \"soil_type\", \"plot\", \"treatment\", \"block\", \"sample_day\", \"sample_number\", \"sample_type\", \"counts\")\nJoining, by = c(\"Sample_Name\", \"Sample_Type\", \"Assay\", \"Assay_Type\", \"ID\", \"rConc\", \"Value\", \"Calibrated rConc\", \"Quality\", \"Call\", \"Threshold\", \"In Range\", \"Out Range\", \"Peak Ratio\", \"soil_type\", \"plot\", \"treatment\", \"block\", \"sample_day\", \"sample_number\", \"sample_type\", \"counts\")\nJoining, by = c(\"Sample_Name\", \"Sample_Type\", \"Assay\", \"Assay_Type\", \"ID\", \"rConc\", \"Value\", \"Calibrated rConc\", \"Quality\", \"Call\", \"Threshold\", \"In Range\", \"Out Range\", \"Peak Ratio\", \"soil_type\", \"plot\", \"treatment\", \"block\", \"sample_day\", \"sample_number\", \"sample_type\", \"counts\")\nJoining, by = c(\"Sample_Name\", \"Sample_Type\", \"Assay\", \"Assay_Type\", \"ID\", \"rConc\", \"Value\", \"Calibrated rConc\", \"Quality\", \"Call\", \"Threshold\", \"In Range\", \"Out Range\", \"Peak Ratio\", \"soil_type\", \"plot\", \"treatment\", \"block\", \"sample_day\", \"sample_number\", \"sample_type\", \"counts\")\nJoining, by = c(\"Sample_Name\", \"Sample_Type\", \"Assay\", \"Assay_Type\", \"ID\", \"rConc\", \"Value\", \"Calibrated rConc\", \"Quality\", \"Call\", \"Threshold\", \"In Range\", \"Out Range\", \"Peak Ratio\", \"soil_type\", \"plot\", \"treatment\", \"block\", \"sample_day\", \"sample_number\", \"sample_type\", \"counts\")\nJoining, by = c(\"Sample_Name\", \"Sample_Type\", \"Assay\", \"Assay_Type\", \"ID\", \"rConc\", \"Value\", \"Calibrated rConc\", \"Quality\", \"Call\", \"Threshold\", \"In Range\", \"Out Range\", \"Peak Ratio\", \"soil_type\", \"plot\", \"treatment\", \"block\", \"sample_day\", \"sample_number\", \"sample_type\", \"counts\")\nJoining, by = c(\"Sample_Name\", \"Sample_Type\", \"Assay\", \"Assay_Type\", \"ID\", \"rConc\", \"Value\", \"Calibrated rConc\", \"Quality\", \"Call\", \"Threshold\", \"In Range\", \"Out Range\", \"Peak Ratio\", \"soil_type\", \"plot\", \"treatment\", \"block\", \"sample_day\", \"sample_number\", \"sample_type\", \"counts\")\nJoining, by = c(\"Sample_Name\", \"Sample_Type\", \"Assay\", \"Assay_Type\", \"ID\", \"rConc\", \"Value\", \"Calibrated rConc\", \"Quality\", \"Call\", \"Threshold\", \"In Range\", \"Out Range\", \"Peak Ratio\", \"soil_type\", \"plot\", \"treatment\", \"block\", \"sample_day\", \"sample_number\", \"sample_type\", \"counts\")\nJoining, by = c(\"Sample_Name\", \"Sample_Type\", \"Assay\", \"Assay_Type\", \"ID\", \"rConc\", \"Value\", \"Calibrated rConc\", \"Quality\", \"Call\", \"Threshold\", \"In Range\", \"Out Range\", \"Peak Ratio\", \"soil_type\", \"plot\", \"treatment\", \"block\", \"sample_day\", \"sample_number\", \"sample_type\", \"counts\")\nJoining, by = c(\"Sample_Name\", \"Sample_Type\", \"Assay\", \"Assay_Type\", \"ID\", \"rConc\", \"Value\", \"Calibrated rConc\", \"Quality\", \"Call\", \"Threshold\", \"In Range\", \"Out Range\", \"Peak Ratio\", \"soil_type\", \"plot\", \"treatment\", \"block\", \"sample_day\", \"sample_number\", \"sample_type\", \"counts\")\nJoining, by = c(\"Sample_Name\", \"Sample_Type\", \"Assay\", \"Assay_Type\", \"ID\", \"rConc\", \"Value\", \"Calibrated rConc\", \"Quality\", \"Call\", \"Threshold\", \"In Range\", \"Out Range\", \"Peak Ratio\", \"soil_type\", \"plot\", \"treatment\", \"block\", \"sample_day\", \"sample_number\", \"sample_type\", \"counts\")\nJoining, by = c(\"Sample_Name\", \"Sample_Type\", \"Assay\", \"Assay_Type\", \"ID\", \"rConc\", \"Value\", \"Calibrated rConc\", \"Quality\", \"Call\", \"Threshold\", \"In Range\", \"Out Range\", \"Peak Ratio\", \"soil_type\", \"plot\", \"treatment\", \"block\", \"sample_day\", \"sample_number\", \"sample_type\", \"counts\")\nJoining, by = c(\"Sample_Name\", \"Sample_Type\", \"Assay\", \"Assay_Type\", \"ID\", \"rConc\", \"Value\", \"Calibrated rConc\", \"Quality\", \"Call\", \"Threshold\", \"In Range\", \"Out Range\", \"Peak Ratio\", \"soil_type\", \"plot\", \"treatment\", \"block\", \"sample_day\", \"sample_number\", \"sample_type\", \"counts\")\nJoining, by = c(\"Sample_Name\", \"Sample_Type\", \"Assay\", \"Assay_Type\", \"ID\", \"rConc\", \"Value\", \"Calibrated rConc\", \"Quality\", \"Call\", \"Threshold\", \"In Range\", \"Out Range\", \"Peak Ratio\", \"soil_type\", \"plot\", \"treatment\", \"block\", \"sample_day\", \"sample_number\", \"sample_type\", \"counts\")\nJoining, by = c(\"Sample_Name\", \"Sample_Type\", \"Assay\", \"Assay_Type\", \"ID\", \"rConc\", \"Value\", \"Calibrated rConc\", \"Quality\", \"Call\", \"Threshold\", \"In Range\", \"Out Range\", \"Peak Ratio\", \"soil_type\", \"plot\", \"treatment\", \"block\", \"sample_day\", \"sample_number\", \"sample_type\", \"counts\")\nJoining, by = c(\"Sample_Name\", \"Sample_Type\", \"Assay\", \"Assay_Type\", \"ID\", \"rConc\", \"Value\", \"Calibrated rConc\", \"Quality\", \"Call\", \"Threshold\", \"In Range\", \"Out Range\", \"Peak Ratio\", \"soil_type\", \"plot\", \"treatment\", \"block\", \"sample_day\", \"sample_number\", \"sample_type\", \"counts\")\nJoining, by = c(\"Sample_Name\", \"Sample_Type\", \"Assay\", \"Assay_Type\", \"ID\", \"rConc\", \"Value\", \"Calibrated rConc\", \"Quality\", \"Call\", \"Threshold\", \"In Range\", \"Out Range\", \"Peak Ratio\", \"soil_type\", \"plot\", \"treatment\", \"block\", \"sample_day\", \"sample_number\", \"sample_type\", \"counts\")\nJoining, by = c(\"Sample_Name\", \"Sample_Type\", \"Assay\", \"Assay_Type\", \"ID\", \"rConc\", \"Value\", \"Calibrated rConc\", \"Quality\", \"Call\", \"Threshold\", \"In Range\", \"Out Range\", \"Peak Ratio\", \"soil_type\", \"plot\", \"treatment\", \"block\", \"sample_day\", \"sample_number\", \"sample_type\", \"counts\")\nJoining, by = c(\"Sample_Name\", \"Sample_Type\", \"Assay\", \"Assay_Type\", \"ID\", \"rConc\", \"Value\", \"Calibrated rConc\", \"Quality\", \"Call\", \"Threshold\", \"In Range\", \"Out Range\", \"Peak Ratio\", \"soil_type\", \"plot\", \"treatment\", \"block\", \"sample_day\", \"sample_number\", \"sample_type\", \"counts\")\nJoining, by = c(\"Sample_Name\", \"Sample_Type\", \"Assay\", \"Assay_Type\", \"ID\", \"rConc\", \"Value\", \"Calibrated rConc\", \"Quality\", \"Call\", \"Threshold\", \"In Range\", \"Out Range\", \"Peak Ratio\", \"soil_type\", \"plot\", \"treatment\", \"block\", \"sample_day\", \"sample_number\", \"sample_type\", \"counts\")\nJoining, by = c(\"Sample_Name\", \"Sample_Type\", \"Assay\", \"Assay_Type\", \"ID\", \"rConc\", \"Value\", \"Calibrated rConc\", \"Quality\", \"Call\", \"Threshold\", \"In Range\", \"Out Range\", \"Peak Ratio\", \"soil_type\", \"plot\", \"treatment\", \"block\", \"sample_day\", \"sample_number\", \"sample_type\", \"counts\")\nJoining, by = c(\"Sample_Name\", \"Sample_Type\", \"Assay\", \"Assay_Type\", \"ID\", \"rConc\", \"Value\", \"Calibrated rConc\", \"Quality\", \"Call\", \"Threshold\", \"In Range\", \"Out Range\", \"Peak Ratio\", \"soil_type\", \"plot\", \"treatment\", \"block\", \"sample_day\", \"sample_number\", \"sample_type\", \"counts\")\nJoining, by = c(\"Sample_Name\", \"Sample_Type\", \"Assay\", \"Assay_Type\", \"ID\", \"rConc\", \"Value\", \"Calibrated rConc\", \"Quality\", \"Call\", \"Threshold\", \"In Range\", \"Out Range\", \"Peak Ratio\", \"soil_type\", \"plot\", \"treatment\", \"block\", \"sample_day\", \"sample_number\", \"sample_type\", \"counts\")\nJoining, by = c(\"Sample_Name\", \"Sample_Type\", \"Assay\", \"Assay_Type\", \"ID\", \"rConc\", \"Value\", \"Calibrated rConc\", \"Quality\", \"Call\", \"Threshold\", \"In Range\", \"Out Range\", \"Peak Ratio\", \"soil_type\", \"plot\", \"treatment\", \"block\", \"sample_day\", \"sample_number\", \"sample_type\", \"counts\")\nJoining, by = c(\"Sample_Name\", \"Sample_Type\", \"Assay\", \"Assay_Type\", \"ID\", \"rConc\", \"Value\", \"Calibrated rConc\", \"Quality\", \"Call\", \"Threshold\", \"In Range\", \"Out Range\", \"Peak Ratio\", \"soil_type\", \"plot\", \"treatment\", \"block\", \"sample_day\", \"sample_number\", \"sample_type\", \"counts\")\nJoining, by = c(\"Sample_Name\", \"Sample_Type\", \"Assay\", \"Assay_Type\", \"ID\", \"rConc\", \"Value\", \"Calibrated rConc\", \"Quality\", \"Call\", \"Threshold\", \"In Range\", \"Out Range\", \"Peak Ratio\", \"soil_type\", \"plot\", \"treatment\", \"block\", \"sample_day\", \"sample_number\", \"sample_type\", \"counts\")\nJoining, by = c(\"Sample_Name\", \"Sample_Type\", \"Assay\", \"Assay_Type\", \"ID\", \"rConc\", \"Value\", \"Calibrated rConc\", \"Quality\", \"Call\", \"Threshold\", \"In Range\", \"Out Range\", \"Peak Ratio\", \"soil_type\", \"plot\", \"treatment\", \"block\", \"sample_day\", \"sample_number\", \"sample_type\", \"counts\")\nJoining, by = c(\"Sample_Name\", \"Sample_Type\", \"Assay\", \"Assay_Type\", \"ID\", \"rConc\", \"Value\", \"Calibrated rConc\", \"Quality\", \"Call\", \"Threshold\", \"In Range\", \"Out Range\", \"Peak Ratio\", \"soil_type\", \"plot\", \"treatment\", \"block\", \"sample_day\", \"sample_number\", \"sample_type\", \"counts\")\n\n\n\nWaterCounts <- WaterCounts %>% # Add classes to ARGs\n  mutate(gene_class = case_when(Assay %in% unique(WaterCounts$Assay[grepl(\"^[aa]\", WaterCounts$Assay)]) ~ \"AMG\",\n                                Assay %in% unique(WaterCounts$Assay[grepl(\"^[erm]\", WaterCounts$Assay)]) ~ \"MLSB\",\n                                Assay %in% unique(WaterCounts$Assay[grepl(\"^[sul]\", WaterCounts$Assay)]) ~ \"Sulfa\",\n                                Assay %in% unique(WaterCounts$Assay[grepl(\"tet\", WaterCounts$Assay)]) ~ \"Tet\",\n                                Assay %in% c(\"intl1\", \"intl2\", \"intl3\", \"IS1247\", \"IS6100\", \"tnpA2\",\n                                              \"tnpA5\", \"tnpA6\", \"tnpA3\", \"intI1F165_clinical\", \"tnpA1\", \"int1-a-marko\", \"tnpA7\") ~ \"MGE\", \n                                Assay %in% c(\"cadC\", \"cmr\") ~ \"HM\",\n                                Assay == c(\"16S_Eub_338_518\") ~ \"16S\"))\nWaterCounts$gene_class_f = factor(WaterCounts$gene_class, # Order the classes\n                                levels = c('AMG', 'MLSB', 'Sulfa', \"Tet\", \"MGE\", \"HM\", \"16S\"))\n\n\nSoilCounts <- SoilCounts %>% # Add classes to ARGs\n  mutate(gene_class = case_when(Assay %in% unique(SoilCounts$Assay[grepl(\"^[aa]\", SoilCounts$Assay)]) ~ \"AMG\",\n                                Assay %in% unique(SoilCounts$Assay[grepl(\"^[erm]\", SoilCounts$Assay)]) ~ \"MLSB\",\n                                Assay %in% unique(SoilCounts$Assay[grepl(\"^[sul]\", SoilCounts$Assay)]) ~ \"Sulfa\",\n                                Assay %in% unique(SoilCounts$Assay[grepl(\"tet\", SoilCounts$Assay)]) ~ \"Tet\",\n                                Assay %in% c(\"intl1\", \"intl2\", \"intl3\", \"IS1247\", \"IS6100\", \"tnpA2\",\n                                              \"tnpA5\", \"tnpA6\", \"tnpA3\", \"intI1F165_clinical\", \"tnpA1\", \"int1-a-marko\", \"tnpA7\") ~ \"MGE\", \n                                Assay %in% c(\"cadC\", \"cmr\") ~ \"HM\",\n                                Assay == c(\"16S_Eub_338_518\") ~ \"16S\"))\nSoilCounts$gene_class_f = factor(SoilCounts$gene_class, # Order the classes\n                                levels = c('AMG', 'MLSB', 'Sulfa', \"Tet\", \"MGE\", \"HM\", \"16S\"))\n\n\nnorm <- WaterCounts %>%\n  unite(ID, c(\"plot\", \"sample_number\", \"Assay\"), sep = \".\", remove = F) %>%\n  dplyr::group_by(plot, sample_number, Assay) %>%\n  dplyr::mutate(rep = seq_along(ID)) %>%\n  select(plot, sample_number, rep, treatment, Assay, gene_class, counts, Value) %>%\n  ungroup()\n\nsaveRDS(norm, file = \"Data/norm.RDS\")\n\n\nsoilnorm <- SoilCounts %>%\n  unite(ID, c(\"plot\", \"sample_day\", \"sample_number\", \"soil_type\", \"Assay\"), sep = \".\", remove = F) %>%\n  dplyr::group_by(plot, sample_day, sample_number, soil_type, Assay) %>%\n  dplyr::mutate(rep = seq_along(ID)) %>%\n  select(plot, sample_number, sample_day, soil_type, rep, treatment, Assay, gene_class, counts, Value) %>%\n  ungroup()\n\n\nSixS <- norm %>%\n  filter(Assay == \"16S_Eub_338_518\") %>%\n  dplyr::rename(SixSCount = counts) %>%\n  select(plot, sample_number, rep, SixSCount, treatment) \nSoilSixS <- soilnorm %>%\n  filter(Assay == \"16S_Eub_338_518\") %>%\n  dplyr::rename(SixSCount = counts) %>%\n  select(plot, sample_number, sample_day, soil_type, rep, SixSCount, treatment)\ndfdf <- norm %>%\n  left_join(SixS, by = c(\"plot\", \"sample_number\", \"rep\", \"treatment\")) %>%\n  filter(!Assay == \"16S_Eub_338_518\")\nsoildfdf <- soilnorm %>%\n  left_join(SoilSixS, by = c(\"plot\", \"sample_number\", \"sample_day\", \"soil_type\", \"rep\", \"treatment\")) %>%\n  filter(!Assay == \"16S_Eub_338_518\")\n# Now got to divide each count of each gene by the 16s number\ntest <- WaterCounts %>% # Order ARGs based on class\n  arrange(gene_class) \nlevels <- dput(levels(factor(test$Assay))) # dput ftw!!!\n\nc(\"16S_Eub_338_518\", \"aadA9\", \"erm(C)\", \"IS6100\", \"strB\", \"sul1 NEW\", \n\"sul2\", \"tetbP\", \"tetG_F\", \"tetH\", \"tetL\", \"tetM\", \"tetT\", \"tetW\", \n\"tetX\")\n\ndfdf$treatment = factor(dfdf$treatment, \n                             levels = c('WCS', 'WCSM', 'WCM'))\n# Also need to set the order of the soil data\nsoildfdf$treatment = factor(soildfdf$treatment, \n                             levels = c('WCS', 'WCSM', 'WCM'))\ndfdf$sample_number <- as.factor(dfdf$sample_number)\nlevels(dfdf$sample_number) <- list(\"2.5\" = \"1\", \"7.5\" = \"2\", \"12.5\" = \"3\", \"17.5\" = \"4\", \"22.5\" = \"5\", \"27.5\" = \"6\")\n\n\nwaterdata <- dfdf %>%\n  mutate(norm = counts/SixSCount)\nsoildata <- soildfdf %>%\n  mutate(norm = counts/SixSCount)\n\nUnfiltered counts in water\n\nlevels(waterdata$treatment) <- list(\"CS\" = \"WCS\", \"CSL\" = \"WCSM\", \"CL\" = \"WCM\")\nheatmap2 <- ggplot(waterdata, aes(as.factor(sample_number), ordered(Assay, levels = levels))) +\n  geom_tile(aes(fill = norm), colour = \"white\", size = 0.1) +\n  scale_fill_viridis_c(name = \"ARG copies \\nnormalized by 16S\")  +\n  labs(x = \"Sample time (min) after runoff\", y = \"ARG\") +\n  facet_nested(gene_class ~ treatment + plot, scales = \"free\", space = \"free\") + theme_classic() +\n  theme(\n    text = element_text(size = 12, family = \"Times\"),\n    panel.background = element_rect(color = 'black', size = 1.4),\n    strip.text.x = element_text(size = 10, face = 'bold'),\n    strip.background = element_rect(colour = 'black', size = 1.4),\n    axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),\n    legend.position = \"top\",\n    legend.key.width = unit(.75, \"in\")\n  ) \nheatmap2\n\n\n\n\n\nggplot(waterdata, aes(as.factor(sample_number), ordered(Assay, levels = levels))) +\n  geom_tile(aes(fill = counts), colour = \"white\", size = 0.1) +\n  scale_fill_viridis_c(name = \"ARG copies\")  +\n  labs(x = \"Sample time (min) after runoff\", y = \"ARG\") +\n  facet_nested(gene_class ~ treatment + plot, scales = \"free\", space = \"free\") + theme_classic() +\n  theme(\n    text = element_text(size = 12, family = \"Times\"),\n    panel.background = element_rect(color = 'black', size = 1.4),\n    strip.text.x = element_text(size = 10, face = 'bold'),\n    strip.background = element_rect(colour = 'black', size = 1.4),\n    axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),\n    legend.position = \"top\",\n    legend.key.width = unit(.75, \"in\")\n  ) \n\n\n\n\nFiltered counts in water\n\nwaterwithlod <- waterdata %>%\n  left_join(lod_max_by_gene, by = c(\"Assay\" = \"Sample_Name\")) \n  \nwaterwithlod$norm[waterwithlod$Value >= waterwithlod$max_lod] <- NA\nwaterwithlod$counts[waterwithlod$Value >= waterwithlod$max_lod] <- NA\nlevels(waterwithlod$treatment) <- list(\"CS\" = \"WCS\", \"CSL\" = \"WCSM\", \"CL\" = \"WCM\")\n\n\nFigure 4\n\n#waterwithlod <- waterwithlod %>% mutate(Assay = str_replace(Assay, \"tetG_F\", \"tetG\"))\n#waterwithlod %>% \n#  mutate(Assay = str_replace(Assay, \"tetG_F\", \"tetG\")) %>%\n#  count(Assay)\nheatmap <- ggplot(waterwithlod, aes(as.factor(sample_number), ordered(Assay, levels = levels))) +\n  geom_tile(aes(fill = norm), colour = \"white\", size = 0.1) +\n  scale_fill_viridis_c(name = \"ARG copies \\nnormalized by 16S\")  +\n  labs(x = \"Sample time (min) after runoff\", y = \"ARG\") +\n  facet_nested(gene_class ~ treatment + plot, scales = \"free\", space = \"free\") + theme_classic() +\n  theme(\n    text = element_text(size = 12, family = \"Times\"),\n    panel.background = element_rect(color = 'black', size = 1.4),\n    strip.text.x = element_text(size = 10, face = 'bold'),\n    strip.background = element_rect(colour = 'black', size = 1.4),\n    axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),\n    legend.position = \"top\",\n    legend.key.width = unit(.75, \"in\")) \nheatmap\n\n\n\nheatmap$data %>%\n  count(Assay)\n\n# A tibble: 14 x 2\n   Assay        n\n   <chr>    <int>\n 1 aadA9      198\n 2 erm(C)     198\n 3 IS6100     198\n 4 strB       198\n 5 sul1 NEW   198\n 6 sul2       198\n 7 tetbP      198\n 8 tetG_F     198\n 9 tetH       198\n10 tetL       198\n11 tetM       198\n12 tetT       198\n13 tetW       198\n14 tetX       198\n\n\n\nAstrik on manure ARGs\n\n\nlabels <- c(tetbP = \"* tetbP \", \n            aphA3 = \"* aphA3 \", \n            tetT = \"* tetT \", \n            tetW = \"* tetW \", \n            `erm(C)` = \"* erm(C)\", \n            tetX = \"* tetX \", \n            tnpA1 = \"* tnpA1 \",\n            tetH = \"* tetH \", \n            lnuA = \"* lnuA \", \n            tnpA5 = \"* tnpA5 \", \n            tetM = \"* tetM \", \n            cmr = \"* cmr \",\n            tetG_F = \"tetG \",\n            `sul1 NEW` = \"sul1\")\nlabels\n\n     tetbP      aphA3       tetT       tetW     erm(C)       tetX      tnpA1 \n\"* tetbP \" \"* aphA3 \"  \"* tetT \"  \"* tetW \" \"* erm(C)\"  \"* tetX \" \"* tnpA1 \" \n      tetH       lnuA      tnpA5       tetM        cmr     tetG_F   sul1 NEW \n \"* tetH \"  \"* lnuA \" \"* tnpA5 \"  \"* tetM \"   \"* cmr \"    \"tetG \"     \"sul1\" \n\n\n\nheatmap +\n  scale_y_discrete(\n    name = NULL,\n    labels = labels\n  ) \n\n\n\nggsave(filename = \"Figures/Fig4.jpeg\", plot = last_plot(), device = \"jpeg\", units = \"in\", width = 7, height = 7.5, dpi = 350)\n\n\nggplot(waterwithlod, aes(as.factor(sample_number), ordered(Assay, levels = levels))) +\n  geom_tile(aes(fill = counts), colour = \"white\", size = 0.1) +\n  scale_fill_viridis_c(name = \"ARG copies\")  +\n  labs(x = \"Sample time (min) after runoff\", y = \"ARG\") +\n  facet_nested(gene_class ~ treatment + plot, scales = \"free\", space = \"free\") + theme_classic() +\n  theme(\n    text = element_text(size = 12, family = \"Times\"),\n    panel.background = element_rect(color = 'black', size = 1.4),\n    strip.text.x = element_text(size = 10, face = 'bold'),\n    strip.background = element_rect(colour = 'black', size = 1.4),\n    axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),\n    legend.position = \"top\",\n    legend.key.width = unit(.75, \"in\"))\n\n\n\n\nA few genes were detected in low enough quantities that they are no longer visible in the filtered data set. Overall, the results do not change much, but there are changes in pairwise significance for some genes that I need to evaluate further.\n\n\nSupp Figure S3\n\nsoilwithlod <- soildata %>%\n  left_join(lod_max_by_gene, by = c(\"Assay\" = \"Sample_Name\")) \n  \nsoilwithlod$norm[soilwithlod$Value >= soilwithlod$max_lod] <- NA\nsoilwithlod$counts[soilwithlod$Value >= soilwithlod$max_lod] <- NA\nlevels(soilwithlod$treatment) <- list(\"CS\" = \"WCS\", \"CSL\" = \"WCSM\", \"CL\" = \"WCM\")\nheatmap2 <- ggplot(soilwithlod, aes(as.factor(sample_day), ordered(Assay, levels = levels))) +\n  geom_tile(aes(fill = norm), colour = \"white\", size = 0.1) +\n  scale_fill_viridis_c(name = \"ARG copies \\nnormalized by 16S\")  +\n  labs(x = \"Sample day\", y = \"ARG\") +\n  facet_nested(gene_class ~ treatment + plot, scales = \"free\", space = \"free\") + theme_classic() +\n  theme(\n    text = element_text(size = 12, family = \"Times\"),\n    panel.background = element_rect(color = 'black', size = 1.4),\n    strip.text.x = element_text(size = 10, face = 'bold'),\n    strip.background = element_rect(colour = 'black', size = 1.4),\n    axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),\n    legend.position = \"top\",\n    legend.key.width = unit(.75, \"in\")\n  ) \nheatmap2 +\n  scale_y_discrete(\n    name = NULL,\n    labels = labels\n  ) \n\n\n\nggsave(filename = \"Figures/SupFigS3.jpeg\", plot = last_plot(), device = \"jpeg\", units = \"in\", width = 7, height = 7.5, dpi = 350)"
  }
]