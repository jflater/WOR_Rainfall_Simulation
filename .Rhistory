library(readxl)
df <- read_csv("Data/water_flow_with_MAB.csv")
?read.csv
?read_csv
??read.csv
library(readr)
df <- read_csv("Data/water_flow_with_MAB.csv")
colnames(df)
ggplot(df, aes(x = as.factor(sample_number), y = collection_time_sec, fill = as.factor(plot))) +
geom_bar(stat = "identity", position = "dodge") +
facet_grid(~ treatment.x) +
ggtitle("Sample Collection time")
library(tidyverse)
colnames(df)
ggplot(df, aes(x = as.factor(sample_number), y = collection_time_sec, fill = as.factor(plot))) +
geom_bar(stat = "identity", position = "dodge") +
facet_grid(~ treatment.x) +
ggtitle("Sample Collection time")
ggplot(df, aes(x = as.factor(sample_number), y = jare_plus_runoff_wt_g - jare_tare_wt_g, fill = as.factor(plot))) +
geom_bar(stat = "identity", position = "dodge") +
facet_grid(~ treatment.x) +
ggtitle("Sample Volume")
# this data is at the end of the document
class(df$plot)
plot <- df %>%
filter(!treatment.x == "Crop + Strip") %>%
ggplot(aes(x = `flow_g/s`, y = Abundance, color = treatment.x)) +
geom_point() +
geom_smooth(method = lm, se = FALSE)  +
scale_color_manual(values = c("darkgreen", "tan4"), name = "Treatment") +
theme_bw()
plot
# this data is at the end of the document
class(df$plot)
plot <- df %>%
filter(!treatment.x == "Crop + Strip") %>%
ggplot(aes(x = `flow_g/s`, y = SumAbund, color = treatment.x)) +
geom_point() +
geom_smooth(method = lm, se = FALSE)  +
scale_color_manual(values = c("darkgreen", "tan4"), name = "Treatment") +
theme_bw()
plot
df$treatment.x
# this data is at the end of the document
class(df$plot)
plot <- df %>%
filter(!treatment.x == "CS") %>%
ggplot(aes(x = `flow_g/s`, y = SumAbund, color = treatment.x)) +
geom_point() +
geom_smooth(method = lm, se = FALSE)  +
scale_color_manual(values = c("darkgreen", "tan4"), name = "Treatment") +
theme_bw()
plot
data <- df %>%
filter(!treatment.x == "CS") %>%
mutate(cor = Abundance / `flow_g/s`) %>%# Make a plot
group_by(treatment.x, time_after_runoff_start) %>%
dplyr::summarise(
n = n(),
mean = mean(cor),
sd = sd(cor)
) %>%
mutate(se = sd/sqrt(n))  %>%
mutate(ic = se * qt((1-0.05)/2 + .5, n-1))
data <- df %>%
filter(!treatment.x == "CS") %>%
mutate(cor = SumAbund / `flow_g/s`) %>%# Make a plot
group_by(treatment.x, time_after_runoff_start) %>%
dplyr::summarise(
n = n(),
mean = mean(cor),
sd = sd(cor)
) %>%
mutate(se = sd/sqrt(n))  %>%
mutate(ic = se * qt((1-0.05)/2 + .5, n-1))
data %>%
ggplot(aes(x = time_after_runoff_start,
y = mean,
ymin = mean - ic,
ymax = mean + ic,
color = treatment.x,
group = treatment.x)) +
geom_point(position = position_dodge(width = 1), size = 2) +
geom_line(position = position_dodge(width = 1), size = 2) +
geom_errorbar(position = position_dodge(width = 1), width = .8) +
labs(y = "Mean MAB / flow", x = "Time", title = "Flow weighted", subtitle = "Divide MAB relative abundance by flow") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_color_manual(values = c("darkgreen", "tan4"), name = "Treatment") +
theme_bw()
watervols <- df %>%
select(treatment.x, plot, sample_number, time_after_runoff_start, collection_time_sec, jare_tare_wt_g, jare_plus_runoff_wt_g, `flow_g/s`) %>%
mutate(sample_volume = jare_plus_runoff_wt_g - jare_tare_wt_g)
# Join the two by plot and sample_number
# Select wanted columns and convert joining variables to factor
# left side
ls <- watervols %>%
group_by(plot) %>%
mutate(plot_volume = sum(sample_volume), plot = as.factor(plot), sample_number = as.factor(sample_number)) %>%
select(treatment.x, plot, sample_number, sample_volume, plot_volume, collection_time_sec, `flow_g/s`) %>%
ungroup()
# right side
rs <- norm %>%
select(plot, sample_number, Assay, counts) %>%
mutate(plot = as.factor(plot), sample_number = as.factor(sample_number))
norm
library(tidyverse)
library(ggh4x)
library(viridis)
library(phyloseq)
library(phylosmith)
library(venn)
library(ggvenn)
library(rstatix)
library(ggpubr)
library(kableExtra)
plot(1:10)
plot(1:10)
library(tidyverse)
library(ggh4x)
library(viridis)
library(phyloseq)
library(phylosmith)
library(venn)
library(ggvenn)
library(rstatix)
library(ggpubr)
library(kableExtra)
# Worle data
worle <- readRDS("Data/Worle_curated.RDS")
# set taxa to ASV, otherwise uses the sequence as taxa name
taxa_names(worle) <- paste0("ASV", seq(ntaxa(worle)))
# rename NA taxa as "Unclassified"
Tax.Table <- data.frame(tax_table(worle)) %>%
replace(is.na(.), "Unclassified")
# replace tax table
tax_table(worle) <- as.matrix(Tax.Table)
colnames(sample_data(worle))
sample_data(worle)$treatment[is.na(sample_data(worle)$treatment)] <- "manure"
pcoa <- pcoa_phyloseq(worle, c('matrix', 'treatment'), circle = T) +
scale_fill_viridis_d() +
theme_minimal()
pcoa
ggsave(filename = "Figures/PCoA.jpeg", plot = pcoa, device = "jpeg", width = 7.0, height = 6.0, units = "in", dpi = 350)
worle.manure <- subset_samples(worle, matrix == "manure") %>% # subset to manure
filter_taxa(function(x) sum(x) >= 1, T)  # Remove taxa observed less than once in these samples
set.seed(010101)
# make a list of unique phyla
phylalist <- data.frame(tax_table(worle), row.names = NULL) %>%
select(Phylum) %>%
unique()
phylalist$Phylum <- as.character(phylalist$Phylum)
library(colorspace)  # this package will generate a palette based on number and desired colors
# assign color from "viridis" package to each phyla and name the list with phyla names
colors <- sequential_hcl(n_distinct(phylalist), palette = "viridis") %>%
setNames(sort(phylalist$Phylum))
global_size = 12 # Font size
phydf <- worle.manure %>%
tax_glom(taxrank = "Phylum") %>%
transform_sample_counts(function(x) x / sum(x)) %>%
psmelt()  # Take manure phyloseq object and glom taxa at phyla level. Transform counts to relative abundance and melt to a data frame.
summary <- phydf %>%  # Make a plot
group_by(Phylum) %>%
summarise(
n=n(),
mean=mean(Abundance),
sd=sd(Abundance)
) %>%
mutate(se = sd/sqrt(n))  %>%
mutate(ic = se * qt((1-0.05)/2 + .5, n-1)) %>%
arrange(-mean)
summary$Phylum <- factor(summary$Phylum, levels = summary$Phylum[order(-summary$mean)]) # arrange won't change order of Phylum factor levels
p1 <- ggplot(summary) +
theme_classic() +
geom_bar(aes(x = Phylum, y = mean, fill = Phylum), stat = "identity",
position = position_dodge(width = 0.75)) +
geom_errorbar( aes(x = reorder(Phylum, -mean), ymin = mean - ic, ymax = mean + ic), width = 0.2, colour = "black", size= 0.5) +
labs(y = "Relative abundance of phyla", x = "Phylum") +
scale_fill_manual(values = colors) +
theme(legend.position = "none",
axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_y_continuous(labels = function(x) paste0(x*100, "%")) +
geom_text(x = "Proteobacteria", y = 0.60, label = "A", size = 8, family = "Times") +
theme(text = element_text(size = global_size, family = "Times"))
p1
# We can make a second smaller plot to show the abundances of the low abundance phyla
p2 <- ggplot(subset(summary, Phylum %in% tail(summary$Phylum, -5))) +
theme_classic() +
geom_bar(aes(x = reorder(Phylum, -mean), y = mean, fill = Phylum), stat = "identity",
position = position_dodge(width = 0.75)) +
geom_errorbar( aes(x = reorder(Phylum, -mean), ymin = mean - ic, ymax = mean + ic), width = 0.2, colour = "black", size= 0.5) +
labs(x = NULL, y = NULL) +
scale_fill_manual(values = colors) +
theme(legend.position = "none",
axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_y_continuous(labels = function(x) paste0(x*100, "%")) +
geom_text(x = "Tenericutes", y = 0.0060, label = "B", size = 8, family = "Times") +
theme(text = element_text(size = global_size, family = "Times"))
p2
p3 <- p1 + annotation_custom(ggplotGrob(p2), xmin = "Deinococcus-Thermus", xmax = "Deferribacteres", ymin = .05, ymax = .65)
p3
# Use ggsave to save plot. I chose 6.5" wide because most word docs are 8.5" with 2 x 1" margins. Keep the height below 9.5" to save room for a caption. When you insert into your document, change the size to 6.5" wide to ensure that the plot looks visually the same.
ggsave(filename = "Figures/Fig1.jpeg", plot = last_plot(), device = "jpeg", width = 7.0, height = 6.0, units = "in", dpi = 350)
# Load copy number from HT-qPCR runs
# If you haven't calculated copy numbers yet,
# see: \#\#\#\#\#\#\#
water_counts <- read_csv("Data/WORWATERARGCOUNTS.csv")
head(water_counts)
watervols <- df %>%
select(treatment.x, plot, sample_number, time_after_runoff_start, collection_time_sec, jare_tare_wt_g, jare_plus_runoff_wt_g, `flow_g/s`) %>%
mutate(sample_volume = jare_plus_runoff_wt_g - jare_tare_wt_g)
watervols <- df %>%
select(treatment.x, plot, sample_number, time_after_runoff_start, collection_time_sec, jare_tare_wt_g, jare_plus_runoff_wt_g, `flow_g/s`) %>%
mutate(sample_volume = jare_plus_runoff_wt_g - jare_tare_wt_g)
# Join the two by plot and sample_number
# Select wanted columns and convert joining variables to factor
# left side
ls <- watervols %>%
group_by(plot) %>%
mutate(plot_volume = sum(sample_volume), plot = as.factor(plot), sample_number = as.factor(sample_number)) %>%
select(treatment.x, plot, sample_number, sample_volume, plot_volume, collection_time_sec, `flow_g/s`) %>%
ungroup()
# right side
rs <- norm %>%
select(plot, sample_number, Assay, counts) %>%
mutate(plot = as.factor(plot), sample_number = as.factor(sample_number))
library(readxl)
mabbarplot$data
saveRDS(mabbarplot, file = "Data/mabbarplot.RDS")
library(tidyverse)
library(ggh4x)
library(viridis)
library(phyloseq)
library(phylosmith)
library(venn)
library(ggvenn)
library(rstatix)
library(ggpubr)
library(kableExtra)
# Worle data
worle <- readRDS("Data/Worle_curated.RDS")
# set taxa to ASV, otherwise uses the sequence as taxa name
taxa_names(worle) <- paste0("ASV", seq(ntaxa(worle)))
# rename NA taxa as "Unclassified"
Tax.Table <- data.frame(tax_table(worle)) %>%
replace(is.na(.), "Unclassified")
# replace tax table
tax_table(worle) <- as.matrix(Tax.Table)
colnames(sample_data(worle))
sample_data(worle)$treatment[is.na(sample_data(worle)$treatment)] <- "manure"
pcoa <- pcoa_phyloseq(worle, c('matrix', 'treatment'), circle = T) +
scale_fill_viridis_d() +
theme_minimal()
pcoa
ggsave(filename = "Figures/PCoA.jpeg", plot = pcoa, device = "jpeg", width = 7.0, height = 6.0, units = "in", dpi = 350)
worle.manure <- subset_samples(worle, matrix == "manure") %>% # subset to manure
filter_taxa(function(x) sum(x) >= 1, T)  # Remove taxa observed less than once in these samples
set.seed(010101)
# make a list of unique phyla
phylalist <- data.frame(tax_table(worle), row.names = NULL) %>%
select(Phylum) %>%
unique()
phylalist$Phylum <- as.character(phylalist$Phylum)
library(colorspace)  # this package will generate a palette based on number and desired colors
# assign color from "viridis" package to each phyla and name the list with phyla names
colors <- sequential_hcl(n_distinct(phylalist), palette = "viridis") %>%
setNames(sort(phylalist$Phylum))
global_size = 12 # Font size
phydf <- worle.manure %>%
tax_glom(taxrank = "Phylum") %>%
transform_sample_counts(function(x) x / sum(x)) %>%
psmelt()  # Take manure phyloseq object and glom taxa at phyla level. Transform counts to relative abundance and melt to a data frame.
summary <- phydf %>%  # Make a plot
group_by(Phylum) %>%
summarise(
n=n(),
mean=mean(Abundance),
sd=sd(Abundance)
) %>%
mutate(se = sd/sqrt(n))  %>%
mutate(ic = se * qt((1-0.05)/2 + .5, n-1)) %>%
arrange(-mean)
summary$Phylum <- factor(summary$Phylum, levels = summary$Phylum[order(-summary$mean)]) # arrange won't change order of Phylum factor levels
p1 <- ggplot(summary) +
theme_classic() +
geom_bar(aes(x = Phylum, y = mean, fill = Phylum), stat = "identity",
position = position_dodge(width = 0.75)) +
geom_errorbar( aes(x = reorder(Phylum, -mean), ymin = mean - ic, ymax = mean + ic), width = 0.2, colour = "black", size= 0.5) +
labs(y = "Relative abundance of phyla", x = "Phylum") +
scale_fill_manual(values = colors) +
theme(legend.position = "none",
axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_y_continuous(labels = function(x) paste0(x*100, "%")) +
geom_text(x = "Proteobacteria", y = 0.60, label = "A", size = 8, family = "Times") +
theme(text = element_text(size = global_size, family = "Times"))
p1
# We can make a second smaller plot to show the abundances of the low abundance phyla
p2 <- ggplot(subset(summary, Phylum %in% tail(summary$Phylum, -5))) +
theme_classic() +
geom_bar(aes(x = reorder(Phylum, -mean), y = mean, fill = Phylum), stat = "identity",
position = position_dodge(width = 0.75)) +
geom_errorbar( aes(x = reorder(Phylum, -mean), ymin = mean - ic, ymax = mean + ic), width = 0.2, colour = "black", size= 0.5) +
labs(x = NULL, y = NULL) +
scale_fill_manual(values = colors) +
theme(legend.position = "none",
axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_y_continuous(labels = function(x) paste0(x*100, "%")) +
geom_text(x = "Tenericutes", y = 0.0060, label = "B", size = 8, family = "Times") +
theme(text = element_text(size = global_size, family = "Times"))
p2
p3 <- p1 + annotation_custom(ggplotGrob(p2), xmin = "Deinococcus-Thermus", xmax = "Deferribacteres", ymin = .05, ymax = .65)
p3
# Use ggsave to save plot. I chose 6.5" wide because most word docs are 8.5" with 2 x 1" margins. Keep the height below 9.5" to save room for a caption. When you insert into your document, change the size to 6.5" wide to ensure that the plot looks visually the same.
ggsave(filename = "Figures/Fig1.jpeg", plot = last_plot(), device = "jpeg", width = 7.0, height = 6.0, units = "in", dpi = 350)
phydf %>%
group_by(Phylum) %>%
summarise(Mean = mean(Abundance), StdDev = sd(Abundance), min = min(Abundance), max = max(Abundance)) %>%
arrange(-Mean)
# strip subset, all strip soil from baseline samples in addition to no_manure_strip treatment, note the | operator
worle.strip <- subset_samples(worle, matrix == "soil" & sample_day == "Baseline" & soil_type == "strip" |
matrix == "soil" & treatment == "no_manure_strip" & soil_type == "strip") %>%
filter_taxa(function(x) sum(x) >= 1, T)
worle.crop <- subset_samples(worle, matrix == "soil" & sample_day == "Baseline" & soil_type == "crop" |
matrix == "soil" & treatment == "no_manure_strip" & soil_type == "crop") %>%
filter_taxa(function(x) sum(x) >= 1, T)
worle.border <- subset_samples(worle, matrix == "soil" & sample_day == "Baseline" & soil_type == "border" |
matrix == "soil" & treatment == "no_manure_strip" & soil_type == "border") %>%
filter_taxa(function(x) sum(x) >= 1, T)
worle.manure <- subset_samples(worle, matrix == "manure") %>%
filter_taxa(function(x) sum(x) >= 1, T)
worle.water <- subset_samples(worle, matrix == "water" & unique_id != "Comp-from-P8-7-10-26-17") %>%
filter_taxa(function(x) sum(x) >= 1, T)
# Make a list of ASVs associated with each type of soil and manure
worle_manure_asvs <- taxa_names(worle.manure)
worle_crop_soil_asvs <- taxa_names(worle.crop)
worle_strip_soil_asvs <- taxa_names(worle.strip)
worle_border_asvs <- taxa_names(worle.border)
worle_water_asvs <- taxa_names(worle.water)
# venn diagram
worle_vvv_diag <- venn(list("Manure_ASVs" = worle_manure_asvs, "Crop_ASVs" = worle_crop_soil_asvs, "Strip_ASVs" = worle_strip_soil_asvs, "Border_ASVs" = worle_border_asvs))
# Access ASVs unique to each soil and manure and store
worle_manure_persitors <- attr(worle_vvv_diag, "intersections")$Manure_ASVs
worle_crop_persistors <- attr(worle_vvv_diag, "intersections")$Crop_ASVs
worle_strip_persistors <- attr(worle_vvv_diag, "intersection")$Strip_ASVs
worle_border_persistors <- attr(worle_vvv_diag, "intersections")$Border_ASVs
Sample_Type <- c("Manure", "Crop", "Strip", "Border")
Number_of_taxa <- c(ntaxa(worle.manure), ntaxa(worle.crop), ntaxa(worle.strip), ntaxa(worle.border))
Taxa_unique_to <- c(length(worle_manure_persitors), length(worle_crop_persistors), length(worle_strip_persistors), length(worle_border_persistors))
df <- data.frame(Sample_Type, Number_of_taxa, Taxa_unique_to)
df
MAB <- tax_table(worle.manure) %>%
data.frame() %>%
rownames_to_column("ASV") %>%
filter(ASV %in% worle_manure_persitors)
head(MAB)
write.table(MAB, file = "Tables/MAB.csv", sep = ",", col.names = T,
qmethod = "double", row.names = F)
ggvenn(list("Manure" = worle_manure_asvs, "Crop" = worle_crop_soil_asvs, "Strip" = worle_strip_soil_asvs, "Border" = worle_border_asvs), set_name_size = 4, show_percentage = F) + scale_fill_viridis_d()
ggsave("Figures/SuppFig2.png", plot = last_plot(), units = "in", width = 6.5, dpi = 300)
tax_association <- tax_table(worle.water) %>%
data.frame() %>%
rownames_to_column("ASV") %>%
mutate(ASV_Association = ifelse(ASV %in% worle_manure_persitors, "MAB","SAB")) %>%
mutate(asv = ASV) %>%
column_to_rownames("ASV") %>%
rename(ASV = asv) %>%
as.matrix()
tax_table(worle.water) <- tax_association
# Due to sequencing depth, we have a few MAB detected in CS plots, let's note them and remove them for "clean" plot.
ASVsinCS <- subset_samples(worle.water, treatment == "no_manure_strip") %>%
subset_taxa(ASV_Association == "MAB") %>%
psmelt()
ASVsinCS <- ASVsinCS %>%
filter(Abundance > 0) %>%
select(OTU, Abundance, Phylum, Class, Order, Family, Genus)
removeASVs <- ASVsinCS$OTU
cleanwater <- subset_taxa(worle.water, !ASV %in% removeASVs)
sp <- cleanwater %>%
transform_sample_counts(function(x) x / sum(x)) %>%
subset_taxa(ASV_Association == "MAB")
sp
p <- phylogeny_profile(sp, classification = 'Phylum', treatment = c("treatment"), merge = TRUE, relative_abundance = F) +
facet_nested(. ~ treatment + plot, scales = "free", space = "free") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
legend.position = "top") +
guides(fill = guide_legend(ncol=3)) +
labs(y = "Relative abundance of MAB") +
scale_x_discrete()
df <- p$data %>%
separate(col = unique_id, into = c("p", "time"), sep = "-")
levels(df$treatment) <- c("CL", "CSL", "CS")
df$treatment <- ordered(df$treatment, levels = c("CS", "CSL", "CL"))
breaks <- df %>%
filter(plot == 4, time == 3) %>%
group_by(Phylum) %>%
summarise(mean = mean(Abundance)) %>%
arrange(mean) %>%
select(Phylum)
df$Phylum <- factor(df$Phylum, levels = breaks$Phylum)
mabbarplot <- ggplot(data = df, aes(x = time, y = Abundance, fill = Phylum)) +
geom_bar(stat = "identity", colour = "black") +
facet_nested(. ~ treatment + plot, scales = "free", space = "free") +
theme_classic() +
theme(
text = element_text(size = global_size, family = "Times"),
legend.position = "top",
panel.background = element_rect(color = 'black', size = 1.4),
strip.text.x = element_text(size = 10, face = 'bold'),
strip.background = element_rect(colour = 'black', size = 1.4),
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
scale_fill_manual(aesthetics = "fill", values = subset(colors, names(colors) %in% df$Phylum), breaks = breaks$Phylum) +
labs(x = "Sample time (min) after runoff", y = "Relative abundance of LAB") +
scale_x_discrete(labels = c("1" = "2.5", "2" = "7.5", "3" = "12.5", "4" = "17.5", "5" = "22.5", "6" = "27.5")) +
scale_y_continuous(labels = function(x) paste0(x*100, "%")) +
guides(fill = guide_legend(nrow = 4))
mabbarplot
saveRDS(mabbarplot, file = "Data/mabbarplot.RDS")
readRDS(file = "Data/mabbarplot.RDS")
library(readxl)
readRDS(file = "Data/mabbarplot.RDS")
mabbarplot$data
flow <- read_excel("Data/WOR_Water_flow.xlsx")
glimpse(flow)
flow$sample_number <- as.character(flow$sample_number)
ggplot(flow, aes(x = as.factor(sample_number), y = `flow_g/s`, group = as.factor(plot))) +
geom_line(position = position_dodge(width = .3)) +
geom_point(aes(color = as.factor(treatment)), position = position_dodge(width = .3), size = 5) +
geom_text(aes(label = plot), position = position_dodge(width = .3), show.legend = F) +
theme_classic() +
theme(
legend.position = "top",
panel.background = element_rect(color = 'black', size = 1.4),
strip.text.x = element_text(size = 10, face = 'bold'),
strip.background = element_rect(colour = 'black', size = 1.4),
axis.text.x = element_text(angle = 0, vjust = 0, hjust = 0.5)) +
scale_color_viridis_d() +
labs(x = "Time after runoff start (min)", y = "Flow (mL/s)", color = "Treatment \n(points labeled with plot)") +
scale_x_discrete(labels = c("1" = "2.5", "2" = "7.5", "3" = "12.5", "4" = "17.5", "5" = "22.5", "6" = "27.5"))
ggsave(filename = "Figures/SupFig4.png", plot = last_plot(), device = "png", width = 6.5, height = 7.5, units = "in", dpi = 350)
SixS <- norm %>%
filter(Assay == "16S_Eub_338_518")
